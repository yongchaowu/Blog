{"compress":true,"commitItems":[["7f4f80b2-5efd-48a8-9839-7af1ac725d32",1561354605430,"# Lorem ipsum\n\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien.",[[1561354574162,["yongchao@yongchao-PC",[[-1,2,"Lorem ipsum"],[1,13,"c"]],[2,13],[3,3]]],[1561354575838,["yongchao@yongchao-PC",[[1,3,"JSon"]],[3,3],[7,7]]],[1561354576885,["yongchao@yongchao-PC",[[-1,4,"Son"]],[7,7],[4,4]]],[1561354577390,["yongchao@yongchao-PC",[[1,4,"son"]],[4,4],[7,7]]],[1561354577670,["yongchao@yongchao-PC",[[1,9,"\n"]],[7,7],[8,8]]],[1561354588829,["yongchao@yongchao-PC",[[-1,2,"c"]],[2,3],[2,2]]],[1561354590821,["yongchao@yongchao-PC",[[1,9,"\n"]],[7,7],[8,8]]],[1561354595077,["yongchao@yongchao-PC",[[-1,9,"\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien."]],[8,415],[8,8]]],[1561354596475,["yongchao@yongchao-PC",[[-1,8,"\n"],[1,9,"#"]],[8,8],[9,9]]],[1561354598542,["yongchao@yongchao-PC",[[1,9,"# cJSon"]],[9,9],[16,16]]],[1561354601374,["yongchao@yongchao-PC",[[-1,12,"JSon"]],[16,16],[12,12]]],[1561354602310,["yongchao@yongchao-PC",[[1,12,"json"]],[12,12],[16,16]]],[1561354603413,["yongchao@yongchao-PC",[[1,8,"\n"]],[7,7],[8,8]]],[1561354621793,["yongchao@yongchao-PC",[[1,7,"# [JSON的简单介绍以及C语言的JSON库使用](https://www.cnblogs.com/liunianshiwei/p/6087596.html)"]],[7,7],[87,87]]],[1561354639452,["yongchao@yongchao-PC",[[1,89,"\n"]],[88,88],[89,89]]],[1561354639628,["yongchao@yongchao-PC",[[1,90,"\n"]],[89,89],[90,90]]],[1561354639772,["yongchao@yongchao-PC",[[1,91,"\n"]],[90,90],[91,91]]],[1561354867127,["yongchao@yongchao-PC",[[1,89,"JSON概述 \n\n　　JSON： JavaScript 对象表示法（ JavaScript Object Notation） 。是一种轻量级的数据交换格式。 它基于ECMAScript的一个子集。 JSON采用完全独立于语言的文本格式， 但是也使用了类似于C语言家族的习惯（ 包括C、 C++、 C#、 Java、 JavaScript、 Perl、 Python等） 。这些特性使JSON成为理想的数据交换语言。 易于人阅读和编写， 同时也易于机器解析和生成(一般用于提升网络传输速率)。\n　　JSON 解析器和 JSON 库支持许多不同的编程语言。 JSON 文本格式在语法上与创建 JavaScript 对象的代码相同。 由于这种相似性， 无需解析器， JavaScript 程序能够使用内建的 eval() 函数， 用 JSON 数据来生成原生的 JavaScript 对象。\n　　JSON 是存储和交换文本信息的语法。 类似 XML。 JSON 比 XML 更小、 更快， 更易解析。\n　　JSON 具有自我描述性， 语法简洁， 易于理解。"]],[89,89],[564,564]]],[1561354873406,["yongchao@yongchao-PC",[[1,89,"## "]],[89,89],[92,92]]],[1561354885509,["yongchao@yongchao-PC",[[-1,0,"# Json"]],[0,6],[0,0]]],[1561354886813,["yongchao@yongchao-PC",[[-1,0,"\n"]],[1,1],[0,0]]],[1561354891005,["yongchao@yongchao-PC",[[-1,563,"## cjson"],[1,571,"\n"]],[563,571],[563,563]]],[1561354902133,["yongchao@yongchao-PC",[[1,563,"JSON语法说明"]],[563,563],[571,571]]],[1561354904062,["yongchao@yongchao-PC",[[1,563,"## "]],[563,563],[566,566]]],[1561354906645,["yongchao@yongchao-PC",[[1,575,"\n"]],[574,574],[575,575]]],[1561354918718,["yongchao@yongchao-PC",[[-1,575,"\n"],[1,576,"`"]],[575,575],[576,576]]],[1561354919317,["yongchao@yongchao-PC",[[1,576,"``"]],[576,576],[578,578]]],[1561354919340,["yongchao@yongchao-PC",[[1,578,"language\n```\n"]],[578,578],[578,586]]],[1561354920565,["yongchao@yongchao-PC",[[-1,578,"language"],[1,586,"\n"]],[578,586],[579,579]]],[1561354920853,["yongchao@yongchao-PC",[[1,579,"{\n  \"stars\": [\n    {\n      \"name\": \"Faye\",\n      \"address\": \"北京\"\n    },\n    {\n      \"name\": \"andy\",\n      \"address\": \"香港\"\n    },\n    {\n      \"name\": \"eddie\",\n      \"address\": \"台湾\"\n    },\n    \n  ]\n}"]],[579,579],[776,776]]],[1561354937205,["yongchao@yongchao-PC",[[1,781,"\n"]],[780,780],[781,781]]],[1561354937949,["yongchao@yongchao-PC",[[1,781,"　JSON 语法是 JavaScript 对象表示法语法的子集。数据在键/值对中；数据由逗号分隔；花括号保存对象， 也称一个文档对象；方括号保存数组， 每个数组成员用逗号隔开， 并且每个数组成员可以是文档对象或者数组或者键值对 。"]],[781,781],[896,896]]],[1561354943085,["yongchao@yongchao-PC",[[1,813,"\n　"]],[813,813],[815,815]]],[1561354945429,["yongchao@yongchao-PC",[[1,824,"\n　"]],[824,824],[826,826]]],[1561354947549,["yongchao@yongchao-PC",[[1,834,"\n　"]],[834,834],[836,836]]],[1561354949453,["yongchao@yongchao-PC",[[1,854,"\n　"]],[854,854],[856,856]]],[1561354954438,["yongchao@yongchao-PC",[[1,814,"  "],[1,825,"  "],[1,835,"  "],[1,855,"  "]],[815,904],[817,912]]],[1561354955221,["yongchao@yongchao-PC",[[1,816,"  "],[1,827,"  "],[1,841,"  "],[1,861,"  "]],[817,912],[819,920]]],[1561354955604,["yongchao@yongchao-PC",[[1,818,"  "],[1,829,"  "],[1,847,"  "],[1,867,"  "]],[819,920],[821,928]]],[1561354955997,["yongchao@yongchao-PC",[[1,820,"  "],[1,831,"  "],[1,853,"  "],[1,873,"  "]],[821,928],[823,936]]],[1561354958493,["yongchao@yongchao-PC",[[1,822,"  "],[1,833,"  "],[1,859,"  "],[1,879,"  "]],[823,936],[825,944]]],[1561354984453,["yongchao@yongchao-PC",[[1,945,"          　\n"]],[944,944],[956,956]]],[1561354984677,["yongchao@yongchao-PC",[[-1,945,"          　"],[1,956,"\n"]],[956,956],[946,946]]],[1561354985165,["yongchao@yongchao-PC",[[1,946,"JSON基于两种结构：\n　　　　“名称/值”对的集合（A collection of name/value pairs）。不同的编程语言中，它被理解为对象（object），纪录（record），结构（struct），字（dictionary），哈希表（hashtable），有键列表（keyed list），或者关联数组 （associative array）。\n　　　　值的有序列表（An ordered list of values）。在大部分语言中，它被实现为数组（array），矢量（vector），列表（list），序列（sequence）。"]],[946,946],[1222,1222]]],[1561354990644,["yongchao@yongchao-PC",[[-1,781,"　"]],[781,782],[781,781]]],[1561354991429,["yongchao@yongchao-PC",[[1,781,"\n"]],[781,781],[782,782]]],[1561355003837,["yongchao@yongchao-PC",[[1,1223,"　　　　\n"]],[1222,1222],[1227,1227]]],[1561355004061,["yongchao@yongchao-PC",[[-1,1223,"　　　　"],[1,1227,"\n"]],[1227,1227],[1224,1224]]],[1561355004478,["yongchao@yongchao-PC",[[1,1224,"JSON的三种语法： \n\n　　　　键/值对 key:value，用半角冒号分割。 比如 \"name\":\"Faye\" 　　　　文档对象 JSON对象写在花括号中，可以包含多个键/值对。比如{ \"name\":\"Faye\" ,\"address\":\"北京\" }。 　　　　数组 JSON 数组在方括号中书写： 数组成员可以是对象，值，也可以是数组(只要有意义)。 {\"love\": [\"乒乓球\",\"高尔夫\",\"斯诺克\",\"羽毛球\",\"LOL\",\"撩妹\"]}"]],[1224,1224],[1448,1448]]],[1561355010029,["yongchao@yongchao-PC",[[1,1286,"\n　　　　"]],[1286,1286],[1291,1291]]],[1561355012421,["yongchao@yongchao-PC",[[1,1361,"\n　　　　"]],[1361,1361],[1366,1366]]],[1561355016029,["yongchao@yongchao-PC",[[-1,1236,"\n"]],[1236,1236],[1235,1235]]],[1561355019149,["yongchao@yongchao-PC",[[-1,1236,"　　　　"],[-1,1286,"　　　　"],[-1,1361,"　　　　"]],[1240,1457],[1240,1457]]],[1561355025413,["yongchao@yongchao-PC",[[-1,1348,"　　　　"]],[1352,1352],[1348,1348]]],[1561355055565,["yongchao@yongchao-PC",[[1,1442,"\n"]],[1441,1441],[1442,1442]]],[1561355055797,["yongchao@yongchao-PC",[[1,1443,"\n"]],[1442,1442],[1443,1443]]],[1561355056757,["yongchao@yongchao-PC",[[1,1444,"\n"]],[1443,1443],[1444,1444]]],[1561355058070,["yongchao@yongchao-PC",[[1,1444,"附cJSON库下载地址 https://github.com/DaveGamble/cJSON \n\ncJSON库在使用的时候只需要如下两步:将cJSON.c(或者库文件) 和 cJSON.h添加到项目中即可;如果在命令行中进行链接 还需要加上-lm 表示链接math库 ."]],[1444,1444],[1580,1580]]],[1561355064999,["yongchao@yongchao-PC",[[1,1443,"## "]],[1443,1443],[1446,1446]]],[1561355067942,["yongchao@yongchao-PC",[[-1,1496,"\n"]],[1496,1496],[1495,1495]]],[1561355070759,["yongchao@yongchao-PC",[[1,1446,"cJson"]],[1446,1446],[1451,1451]]],[1561355181966,["yongchao@yongchao-PC",[[1,1588,"\n"]],[1587,1587],[1588,1588]]],[1561355182190,["yongchao@yongchao-PC",[[1,1589,"\n"]],[1588,1588],[1589,1589]]],[1561355182933,["yongchao@yongchao-PC",[[1,1589,"C语言函数库写JSON文件 ： \n\n　　　　从缓冲区中解析出JSON结构：extern cJSON *cJSON_Parse(const char *value); 　　　　　　　　解析一块JSON数据返回cJSON结构， 在使用完之后调用cJSON_Delete函数释放json对象结构。\n\n　　　　将传入的JSON结构转化为字符串 ：extern char *cJSON_Print(cJSON *item); 　　　　　　　　可用于输出到输出设备， 使用完之后free(char *) 。\n\n　　　　将JSON结构所占用的数据空间释放 ：void cJSON_Delete(cJSON *c)\n\n　　　　创建一个值类型的数据 ：extern cJSON *cJSON_CreateNumber(double num);\n　　　　　　　　　　　　　　　 extern cJSON *cJSON_CreateString(const char *string);\n　　　　　　　　　　　　　　　 extern cJSON *cJSON_CreateArray(void);\n\n　　　　创建一个对象（文档） ：extern cJSON *cJSON_CreateObject(void);\n\n　　　　数组创建以及添加 ：cJSON *cJSON_CreateIntArray(const int *numbers,int count);\n　　　　　　　　　　　　　 void cJSON_AddItemToArray(cJSON *array, cJSON *item);\n\n　　　　JSON嵌套 ：\n\n　　　　　　　　　　【 向对象中增加键值对】 cJSON_AddItemToObject(root, \"rows\", 值类型数据相关函数());\n　　　　　　　　　　【 向对象中增加数组】 cJSON_AddItemToObject(root, \"rows\", cJSON_CreateArray());\n　　　　　　　　　　【 向数组中增加对象】 cJSON_AddItemToArray(rows, cJSON_CreateObject());\n\n　　　　几个能提高操作效率的宏函数 ：#define cJSON_AddNumberToObject(object,name,n) \\\n　　　　　　　　　　　　　　　　　　　　　　  cJSON_AddItemToObject(object, name,cJSON_CreateNumber(n))\n　　　　　　　　　　　　　　　　　　 #define cJSON_AddStringToObject(object,name,s)\\\n　　　　　　　　　　　　　　　　　　　　　　  cJSON_AddItemToObject(object, name, cJSON_CreateString(s))"]],[1589,1589],[2816,2816]]],[1561355185272,["yongchao@yongchao-PC",[[1,1589,"#"],[-1,2607," "],[1,2608," "],[-1,2756," "],[1,2757," "]],[1589,1589],[1590,1590]]],[1561355185871,["yongchao@yongchao-PC",[[1,1590,"## "]],[1590,1590],[1593,1593]]],[1561355189423,["yongchao@yongchao-PC",[[-1,1611,"　　　　"]],[1615,1615],[1615,1615]]],[1561355192070,["yongchao@yongchao-PC",[[1,1680,"\n"]],[1680,1680],[1681,1681]]],[1561355194574,["yongchao@yongchao-PC",[[-1,1737,"　　　　"]],[1741,1741],[1741,1741]]],[1561355196630,["yongchao@yongchao-PC",[[1,1802,"\n"]],[1802,1802],[1803,1803]]],[1561355198766,["yongchao@yongchao-PC",[[-1,1836,"　　　　"]],[1840,1840],[1840,1840]]],[1561355203511,["yongchao@yongchao-PC",[[-1,1884,"　　　　"],[-1,1946,"　　　　　　　　　　　　　　　 "],[-1,2016,"　　　　　　　　　　　　　　　 "]],[1888,2071],[1888,2071]]],[1561355206862,["yongchao@yongchao-PC",[[1,1896,"\n"]],[1896,1896],[1897,1897]]],[1561355209422,["yongchao@yongchao-PC",[[-1,2037,"　　　　"]],[2041,2041],[2041,2041]]],[1561355210870,["yongchao@yongchao-PC",[[-1,2090,"　　　　"]],[2094,2094],[2094,2094]]],[1561355214118,["yongchao@yongchao-PC",[[1,2100,"\n"]],[2100,2100],[2101,2101]]],[1561355215782,["yongchao@yongchao-PC",[[-1,2160,"　　　　　　　　　　　　　 "]],[2173,2173],[2173,2173]]],[1561355218438,["yongchao@yongchao-PC",[[-1,2215,"　　　　"]],[2219,2219],[2219,2219]]],[1561355222526,["yongchao@yongchao-PC",[[-1,2225,"　　　　　　　　　　"],[-1,2298,"　　　　　　　　　　"],[-1,2378,"　　　　　　　　　　"]],[2235,2449],[2235,2449]]],[1561355225334,["yongchao@yongchao-PC",[[-1,2224,"\n"]],[2224,2224],[2223,2223]]],[1561355227518,["yongchao@yongchao-PC",[[-1,2420,"　　　　"]],[2424,2424],[2424,2424]]],[1561355229038,["yongchao@yongchao-PC",[[1,2435,"\n"]],[2435,2435],[2436,2436]]],[1561355231414,["yongchao@yongchao-PC",[[-1,2485,"　　　　　　　　　　　　　　　　　　　　　　  "]],[2509,2509],[2509,2509]]],[1561355233150,["yongchao@yongchao-PC",[[-1,2543,"　　　　　　　　　　　　　　　　　　 "]],[2562,2562],[2562,2562]]],[1561355234902,["yongchao@yongchao-PC",[[-1,2591,"　　　　　　　　　　　　　　　　　　　　　　  "]],[2615,2615],[2615,2615]]],[1561355426918,["yongchao@yongchao-PC",[[1,2650,"\n"]],[2649,2649],[2650,2650]]],[1561355427127,["yongchao@yongchao-PC",[[1,2651,"\n"]],[2650,2650],[2651,2651]]],[1561355427963,["yongchao@yongchao-PC",[[1,2651,"C语言库函数解析JSON文件 ：\n\n　　　　根据键找json结点 ：extern cJSON *cJSON_GetObjectItem(cJSON *object,const char *string)\n\n　　　　判断是否有key是string的项 如果有返回1 否则返回0 ：extern int cJSON_HasObjectItem(cJSON *object,const char *string)\n　　　　　　　　　　　　　　　　　　　　　　{ return cJSON_GetObjectItem(object,string)?1:0; }\n\n　　　　返回数组结点array中成员的个数 ：extern int cJSON_GetArraySize(cJSON *array);\n\n　　　　根据数组下标index取array数组结点的第index个成员 返回该成员节点 ：extern cJSON *cJSON_GetArrayItem(cJSON *array,int index);\n\n　　　　遍历数组 ：#define cJSON_ArrayForEach(pos, head)        for(pos = (head)->child; pos != NULL; pos = pos->next)"]],[2651,2651],[3211,3211]]],[1561355430776,["yongchao@yongchao-PC",[[1,2651,"#"],[-1,3149,"       "],[1,3156,"       "]],[2651,2651],[2652,2652]]],[1561355431439,["yongchao@yongchao-PC",[[1,2652,"## "]],[2652,2652],[2655,2655]]],[1561355433414,["yongchao@yongchao-PC",[[-1,2673,"　　　　"]],[2677,2677],[2677,2677]]],[1561355434390,["yongchao@yongchao-PC",[[-1,2754,"　　　　"]],[2758,2758],[2758,2758]]],[1561355436463,["yongchao@yongchao-PC",[[-1,2851,"　　　　　　　　　　　　　　　　　　　　　　"]],[2873,2873],[2873,2873]]],[1561355438518,["yongchao@yongchao-PC",[[-1,2903,"　　　　"]],[2907,2907],[2907,2907]]],[1561355439318,["yongchao@yongchao-PC",[[-1,2968,"　　　　"]],[2972,2972],[2972,2972]]],[1561355441686,["yongchao@yongchao-PC",[[-1,3068,"　　　　"]],[3072,3072],[3072,3072]]],[1561355446254,["yongchao@yongchao-PC",[[1,3074,"\n"]],[3074,3074],[3075,3075]]],[1561355449686,["yongchao@yongchao-PC",[[1,3120,"\n"]],[3120,3120],[3121,3121]]],[1561356205038,["yongchao@yongchao-PC",[[1,3176,"\n"]],[3175,3175],[3176,3176]]],[1561356205278,["yongchao@yongchao-PC",[[1,3177,"\n"]],[3176,3176],[3177,3177]]],[1561356206479,["yongchao@yongchao-PC",[[-1,3177,"\n"],[1,3178,"#"]],[3177,3177],[3178,3178]]],[1561356208559,["yongchao@yongchao-PC",[[1,3178,"## oh"]],[3178,3178],[3183,3183]]],[1561356209094,["yongchao@yongchao-PC",[[-1,3182,"h"]],[3183,3183],[3182,3182]]],[1561356209711,["yongchao@yongchao-PC",[[1,3182,"ther"]],[3182,3182],[3186,3186]]],[1561356210070,["yongchao@yongchao-PC",[[1,3186,"\n\n"]],[3186,3186],[3187,3187]]],[1561356210527,["yongchao@yongchao-PC",[[1,3187,"```\nJSON.stringify(value[, replacer [, space]])\n```"]],[3187,3187],[3238,3238]]],[1561356229326,["yongchao@yongchao-PC",[[1,3235,"\n"]],[3235,3235],[3236,3236]]],[1561356230254,["yongchao@yongchao-PC",[[1,3235,"将一个JavaScript值(对象或者数组)转换为一个 JSON字符串，如果指定了replacer是一个函数，则可以选择性的替换值，或者如果指定了replacer是一个数组，可选择性的仅包含数组指定的属性。"]],[3235,3235],[3338,3338]]],[1561356344327,["yongchao@yongchao-PC",[[1,3339,"\n"]],[3338,3338],[3339,3339]]],[1561356344936,["yongchao@yongchao-PC",[[1,3339,"### 参数[](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Parameters)\n\n### [节](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Parameters)\n\n`value`\n\n将要序列化成 一个JSON 字符串的值。\n\n`replacer` 可选\n\n如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化；关于该参数更详细的解释和示例，请参考[使用原生的 JSON 对象](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Using_native_JSON#The_replacer_parameter)一文。\n\n`space` 可选\n\n指定缩进用的空白字符串，用于美化输出（pretty-print）；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。\n\n### 返回值 [](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E8%BF%94%E5%9B%9E%E5%80%BC)\n\n### [节](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E8%BF%94%E5%9B%9E%E5%80%BC)\n\n一个表示给定值的JSON字符串。"]],[3339,3339],[4316,4316]]],[1561356394423,["yongchao@yongchao-PC",[[1,4321,"\n"]],[4320,4320],[4321,4321]]],[1561356394671,["yongchao@yongchao-PC",[[1,4322,"\n"]],[4321,4321],[4322,4322]]],[1561356395776,["yongchao@yongchao-PC",[[-1,4036," "],[1,4037," "],[-1,4322,"\n"],[1,4323,"#"]],[4322,4322],[4323,4323]]],[1561356396712,["yongchao@yongchao-PC",[[1,4323,"### "]],[4323,4323],[4327,4327]]],[1561356397367,["yongchao@yongchao-PC",[[1,4327,"\n\n"]],[4327,4327],[4328,4328]]],[1561356397575,["yongchao@yongchao-PC",[[1,4328,"```\nJSON.stringify(object) === '{}'\n```"]],[4328,4328],[4367,4367]]],[1561356403375,["yongchao@yongchao-PC",[[1,4327,"判断JSON对象是否为空对象"]],[4327,4327],[4341,4341]]],[1561356413375,["yongchao@yongchao-PC",[[1,3187,"\n"]],[3186,3186],[3187,3187]]],[1561356419138,["yongchao@yongchao-PC",[[1,3187,"#### JSON.stringify()"]],[3187,3187],[3208,3208]]],[1561356426935,["yongchao@yongchao-PC",[[1,3187,"\n"]],[3186,3186],[3187,3187]]],[1561356454063,["yongchao@yongchao-PC",[[-1,3370,"(https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Parameters)\n\n### [节](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Parameters)\n"]],[3370,3596],[3370,3370]]],[1561356464095,["yongchao@yongchao-PC",[[-1,3833," [](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E8%BF%94%E5%9B%9E%E5%80%BC)\n\n### [节](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E8%BF%94%E5%9B%9E%E5%80%BC)"]],[3833,4095],[3833,3833]]],[1561356465503,["yongchao@yongchao-PC",[[-1,3826,"### "]],[3826,3830],[3826,3826]]],[1561356467975,["yongchao@yongchao-PC",[[-1,3362,"### "]],[3362,3366],[3362,3362]]],[1561356469375,["yongchao@yongchao-PC",[[-1,3364,"[]"]],[3364,3366],[3364,3364]]],[1561356471663,["yongchao@yongchao-PC",[[1,3362,"\n"]],[3361,3361],[3362,3362]]],[1561356474774,["yongchao@yongchao-PC",[[-1,3825,"\n"]],[3825,3825],[3824,3824]]],[1561356666719,["yongchao@yongchao-PC",[[1,3842,"\n"]],[3841,3841],[3842,3842]]],[1561356666935,["yongchao@yongchao-PC",[[1,3843,"\n"]],[3842,3842],[3843,3843]]],[1561356667885,["yongchao@yongchao-PC",[[1,3843,"## 描述[](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E6%8F%8F%E8%BF%B0)\n\n## [节](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E6%8F%8F%E8%BF%B0)\n\nJSON.stringify()将值转换为相应的JSON格式：\n\n*   转换值如果有toJSON()方法，该方法定义什么值将被序列化。\n*   非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中。\n*   布尔值、数字、字符串的包装对象在序列化过程中会自动转换成对应的原始值。\n*   `undefined、`任意的函数以及 symbol 值，在序列化过程中会被忽略（出现在非数组对象的属性值中时）或者被转换成 `null`（出现在数组中时）。函数、undefined被单独转换时，会返回undefined，如`JSON.stringify(function(){})` or `JSON.stringify(undefined).`\n*   对包含循环引用的对象（对象之间相互引用，形成无限循环）执行此方法，会抛出错误。\n*   所有以 symbol 为属性键的属性都会被完全忽略掉，即便 `replacer` 参数中强制指定包含了它们。\n*   Date日期调用了toJSON()将其转换为了string字符串（同Date.toISOString()），因此会被当做字符串处理。\n*   NaN和Infinity格式的数值及null都会被当做null。\n*   其他类型的对象，包括Map/Set/weakMap/weakSet，仅会序列化可枚举的属性。"]],[3843,3843],[4677,4677]]],[1561356671239,["yongchao@yongchao-PC",[[-1,3848,"[](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E6%8F%8F%E8%BF%B0)\n\n## [节](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#%E6%8F%8F%E8%BF%B0)"]],[3848,4090],[3848,3848]]],[1561356674071,["yongchao@yongchao-PC",[[-1,3843,"## "]],[3846,3846],[3843,3843]]],[1561356677607,["yongchao@yongchao-PC",[[-1,3846,"\n"]],[3846,3846],[3845,3845]]]],null,"yongchao@yongchao-PC"]]}