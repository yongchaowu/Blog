{"compress":true,"commitItems":[["05cd84f2-5fc1-4800-9d74-2f487fd21808",1560691124871,"# Lorem ipsum\n\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien.",[[1560691093823,["wycls@Yc",[[-1,2,"Lorem ipsum"],[1,13,"[利用HTTP Cache来优化网站](https://www.cnblogs.com/cocowool/archive/2011/08/22/2149929.html)"]],[2,13],[87,87]]],[1560691097077,["wycls@Yc",[[-1,89,"Interdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue."],[-1,265,"\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien."]],[89,494],[89,89]]],[1560691097971,["wycls@Yc",[[-1,89,"\n"]],[89,89],[88,88]]],[1560691100134,["wycls@Yc",[[-1,88,"\n"],[1,89,"、"]],[88,88],[89,89]]],[1560691101349,["wycls@Yc",[[-1,88,"、"],[1,89,"\n"]],[89,89],[88,88]]],[1560691101684,["wycls@Yc",[[1,89,"\n"]],[88,88],[89,89]]],[1560691134361,["wycls@Yc",[[1,89,"**什么是缓存？**\n\n缓存是一个到处都存在的用空间换时间的例子。通过使用多余的空间，我们能够获取更快的速度。用户在浏览网站的时候，浏览器能够在本地保存网站中的图片或者其他文件的副本，这样用户再次访问该网站的时候，浏览器就不用再下载全部的文件，减少了下载量意味着提高了页面加载的速度。"]],[89,89],[231,231]]],[1560691137482,["wycls@Yc",[[1,89,"## "]],[89,89],[92,92]]],[1560691143411,["wycls@Yc",[[1,125,"\n"]],[125,125],[126,126]]],[1560691230460,["wycls@Yc",[[1,236,"\n"]],[235,235],[236,236]]],[1560691230866,["wycls@Yc",[[1,237,"\n"]],[236,236],[237,237]]],[1560691241454,["wycls@Yc",[[1,237,"![HTTP浏览器与服务器之间交互]($resource/HTTP%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E4%BA%A4%E4%BA%92.png)\n"]],[237,237],[375,375]]],[1560691358805,["wycls@Yc",[[1,376,"\n"]],[374,374],[375,375]]],[1560691358988,["wycls@Yc",[[1,377,"\n"]],[375,375],[376,376]]],[1560691359333,["wycls@Yc",[[1,376,"**缓存的缺点**\n\n缓存非常有用，但是也带来了一定的缺陷。当我们的网站发生了更新的时候，比如说Logo换了，浏览器本地仍保存着旧版本的Logo，那么浏览器如何来确定使用本地文件还是使用服务器上的新文件？下面来介绍几种判断的方法。"]],[376,376],[491,491]]],[1560691362471,["wycls@Yc",[[1,376,"## "]],[376,376],[379,379]]],[1560691384202,["wycls@Yc",[[1,496,"\n"]],[494,494],[495,495]]],[1560691384374,["wycls@Yc",[[1,497,"\n"]],[495,495],[496,496]]],[1560691385294,["wycls@Yc",[[1,496,"Caching Method 1：Last-Modified"]],[496,496],[526,526]]],[1560691390406,["wycls@Yc",[[1,496,"### "]],[496,496],[500,500]]],[1560691391739,["wycls@Yc",[[1,532,"\n"]],[530,530],[531,531]]],[1560691481855,["wycls@Yc",[[1,532,"![CacheMethod1]($resource/CacheMethod1.png)\n"]],[532,532],[576,576]]],[1560691530760,["wycls@Yc",[[1,577,"\n"]],[576,576],[577,577]]],[1560691530943,["wycls@Yc",[[1,578,"\n"]],[577,577],[578,578]]],[1560691532698,["wycls@Yc",[[-1,578,"\n"],[1,579,"#"]],[578,578],[579,579]]],[1560691533861,["wycls@Yc",[[1,579,"## **Caching Method 2: ETag**"]],[579,579],[608,608]]],[1560691535484,["wycls@Yc",[[-1,606,"**"]],[608,608],[606,606]]],[1560691537973,["wycls@Yc",[[-1,582,"**"]],[584,584],[582,582]]],[1560691539151,["wycls@Yc",[[1,604,"\n\n"]],[604,604],[605,605]]],[1560691563217,["wycls@Yc",[[1,605,"通常情况下，通过修改时间来比较文件是可行的。但是在一些特殊情况，例如服务器的时钟发生了错误，服务器时钟进行修改，夏时制DST到来后服务器时间没有及时更新，这些都会引起通过修改时间比较文件版本的问题。\n\nETag可以用来解决这种问题。ETag是一个文件的唯一标志符。就像一个哈希或者指纹，每个文件都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。"]],[605,605],[785,785]]],[1560691606842,["wycls@Yc",[[1,786,"\n"]],[785,785],[786,786]]],[1560691607027,["wycls@Yc",[[1,787,"\n"]],[786,786],[787,787]]],[1560691620622,["wycls@Yc",[[1,787,"![CacheMethod2]($resource/CacheMethod2.png)\n"]],[787,787],[831,831]]],[1560691672609,["wycls@Yc",[[1,832,"\n"]],[831,831],[832,832]]],[1560691673919,["wycls@Yc",[[1,832,"Caching Method 3：Expires"]],[832,832],[856,856]]],[1560691679540,["wycls@Yc",[[1,832,"### "]],[832,832],[836,836]]],[1560691680644,["wycls@Yc",[[1,861,"\n"]],[860,860],[861,861]]],[1560691683994,["wycls@Yc",[[1,831,"‘"]],[831,831],[832,832]]],[1560691684281,["wycls@Yc",[[1,833,"\n"]],[832,832],[833,833]]],[1560691685279,["wycls@Yc",[[-1,831,"‘"]],[832,832],[831,831]]],[1560691706661,["wycls@Yc",[[1,862,"缓存一个文件，并且与服务器确认版本的方式非常好，但是仍有一个缺点，我们必须连接服务器。每次使用前都进行一次比较，这种方法很安全，但还不是最好的。我们可以使用 Expiration Date 来减少这种请求。"]],[862,862],[965,965]]],[1560691709690,["wycls@Yc",[[1,966,"\n"]],[965,965],[966,966]]],[1560691711020,["wycls@Yc",[[1,967,"\n"]],[966,966],[967,967]]],[1560691712076,["wycls@Yc",[[1,968,"\n"]],[966,966],[967,967]]],[1560691736105,["wycls@Yc",[[1,969,"\n"]],[966,966],[967,967]]],[1560691746430,["wycls@Yc",[[1,967,"![CacheMethod3]($resource/CacheMethod3.png)"]],[967,967],[1011,1011]]],[1560691748657,["wycls@Yc",[[1,1013,"\n"]],[1011,1011],[1012,1012]]],[1560691750029,["wycls@Yc",[[1,1014,"\n"]],[1012,1012],[1013,1013]]],[1560691912844,["wycls@Yc",[[1,1012,"Caching Method 4：Max-age"]],[1012,1012],[1036,1036]]],[1560691915563,["wycls@Yc",[[1,1012,"### "]],[1012,1012],[1016,1016]]],[1560691916207,["wycls@Yc",[[1,1043,"\n"]],[1040,1040],[1041,1041]]],[1560691922883,["wycls@Yc",[[1,1041,"Expires的方法很好，但是我们每次都得算一个精确的时间。max-age 标签可以让我们更加容易的处理过期时间。我们只需要说，这份资料你只能用一个星期就可以了。\n\nMax-age 使用秒来计量，下面是一些常用的单位：\n\n1 days in seconds = 86400\n\n1 week in seconds = 604800\n\n1 month in seconds = 2629000\n\n1 year in seconds = 31536000"]],[1041,1041],[1265,1265]]],[1560691971013,["wycls@Yc",[[1,1267,"**额外的标签**\n\n缓存标签永远不会停止工作，但是有时候我们需要对已经缓存的内容进行一些控制。\n\n     Cache-control: public 表示缓存的版本可以被代理服务器或者其他中间服务器识别。\n\n     Cache-control: private 意味着这个文件对不同的用户是不同的。只有用户自己的浏览器能够进行缓存，公共的代理服务器不允许缓存。\n\n     Cache-control: no-cache 意味着文件的内容不应当被缓存。这在搜索或者翻页结果中非常有用，因为同样的URL，对应的内容会发生变化。\n\n注意：有些标签只是在支持HTTP/1.1的浏览器上可用，如果想要了解更多，那么推荐RFC2616以及[Cache docs](http://www.mnot.net/cache_docs/)。"]],[1267,1267],[1630,1630]]],[1560691974174,["wycls@Yc",[[-1,1267,""],[1,1267,"#"],[-1,1317,"     "],[1,1322,"     "],[-1,1373,"     "],[1,1378,"     "],[-1,1452,"     "],[1,1457,"     "]],[1267,1267],[1268,1268]]],[1560691974938,["wycls@Yc",[[1,1268,"# "]],[1268,1268],[1270,1270]]],[1560692165468,["wycls@Yc",[[1,1634,"\n"]],[1633,1633],[1634,1634]]],[1560692165653,["wycls@Yc",[[1,1635,"\n"]],[1634,1634],[1635,1635]]],[1560692165883,["wycls@Yc",[[1,1636,"\n"]],[1635,1635],[1636,1636]]],[1560692167382,["wycls@Yc",[[-1,1636,"\n"],[1,1637,"#"]],[1636,1636],[1637,1637]]],[1560692168446,["wycls@Yc",[[1,1637," 利用负载均衡优化和加速HTTP应用"]],[1637,1637],[1655,1655]]],[1560692169269,["wycls@Yc",[[1,1655,"\n\n"]],[1655,1655],[1656,1656]]],[1560692183283,["wycls@Yc",[[1,1657,"\n"]],[1655,1655],[1656,1656]]],[1560692183473,["wycls@Yc",[[1,1656,"https://blog.51cto.com/virtualadc/580832"]],[1656,1656],[1696,1696]]],[1560692185756,["wycls@Yc",[[1,1698,"\n"]],[1696,1696],[1697,1697]]],[1560692187582,["wycls@Yc",[[1,1699,"\n"]],[1697,1697],[1698,1698]]],[1560692281068,["wycls@Yc",[[1,1700,"\n"]],[1697,1697],[1698,1698]]],[1560692282002,["wycls@Yc",[[1,1698,"##"]],[1698,1698],[1700,1700]]],[1560692282460,["wycls@Yc",[[1,1703,"\n"]],[1700,1700],[1701,1701]]],[1560692283058,["wycls@Yc",[[1,1701,"# 1.负载均衡技术简介\n\n现代企业信息化应用越来越多的采用B/S应用架构来承载企业的关键业务，因此，确保这些任务的可靠运行就变得日益重要。随着越来越多的企业实施数据集中，应用的扩展性、安全性和可靠性也越来越受到企业的重视。\n\n负载均衡技术通过设置虚拟服务器IP（VIP），将后端多台真实服务器的应用资源虚拟成一台高性能的应用服务器，通过负载均衡算法，将大量来自客户端的应用请求分配到后端的服务器进行处理。负载均衡设备持续的对服务器上的应用状态进行检查，并自动对无效的应用服务器进行隔离，实现了一个简单、扩展性强、可靠性高的应用解决方案。解决了单台服务器处理性能不足，扩展性不够，可靠性较低的问题。\n\n近年来，随着Web2.0和B/S技术的迅猛发展，HTTP应用逐渐成为当今的主流应用，而负载均衡技术也有了很大的发展。从传统的基于四层端口号进行简单的应用请求转发，到目前基于七层内容进行请求的转发和处理。尤其是在HTTP协议的优化和加速方面，一些技术逐渐发展成熟，如：TCP连接复用、内容缓存、TCP缓冲、HTTP压缩、SSL加速等。这些技术的应用有助于进一步改善用户访问响应时间、节约广域网链路带宽和服务器资源。"]],[1701,1701],[2208,2208]]],[1560692285307,["wycls@Yc",[[-1,1701,"#"]],[1702,1702],[1701,1701]]],[1560692285592,["wycls@Yc",[[-1,1700,"\n"]],[1701,1701],[1700,1700]]],[1560692289860,["wycls@Yc",[[1,2209,"\n"]],[2207,2207],[2208,2208]]],[1560692305324,["wycls@Yc",[[1,2208,"2\\. HTTP优化和加速特性带来的优势"]],[2208,2208],[2228,2228]]],[1560692308328,["wycls@Yc",[[1,2208,"## "]],[2208,2208],[2211,2211]]],[1560692317891,["wycls@Yc",[[-1,2212,"\\."]],[2214,2214],[2212,2212]]],[1560692323273,["wycls@Yc",[[1,2231,"\n"]],[2230,2230],[2231,2231]]],[1560692550394,["wycls@Yc",[[-1,2231,"\n"],[1,2232,"#"]],[2231,2231],[2232,2232]]],[1560692551561,["wycls@Yc",[[1,2232,"## 2.1 TCP 连接复用（TCP Connection Reuse）"]],[2232,2232],[2269,2269]]],[1560692553377,["wycls@Yc",[[1,2269,"\n\n"]],[2269,2269],[2270,2270]]],[1560692583455,["wycls@Yc",[[1,2270,"TCP连接复用技术通过将前端多个客户的HTTP请求复用到后端与服务器建立的一个TCP连接上。这种技术能够大大减小服务器的性能负载，减少与服务器之间新建TCP连接所带来的延时，并最大限度的降低客户端对后端服务器的并发连接数请求，减少服务器的资源占用。\n\n一般情况下，客户端在发送HTTP请求之前需要先与服务器进行TCP三次握手，建立TCP连接，然后发送HTTP请求。服务器收到HTTP请求后进行处理，并将处理的结果发送回客户端，然后客户端和服务器互相发送FIN并在收到FIN的ACK确认后关闭连接。在这种方式下，一个简单的HTTP请求需要十几个TCP数据包才能处理完成。\n\n采用TCP连接复用技术后，客户端（如：ClientA）与负载均衡设备之间进行三次握手并发送HTTP请求。负载均衡设备收到请求后，会检测服务器是否存在空闲的长连接，如果不存在，服务器将建立一个新连接。当HTTP请求响应完成后，客户端则与负载均衡设备协商关闭连接，而负载均衡则保持与服务器之间的这个连接。当有其它客户端（如：ClientB）需要发送HTTP请求时，负载均衡设备会直接向与服务器之间保持的这个空闲连接发送HTTP请求，避免了由于新建TCP连接造成的延时和服务器资源耗费。"]],[2270,2270],[2796,2796]]],[1560692585824,["wycls@Yc",[[1,2797,"\n"]],[2796,2796],[2797,2797]]],[1560692586009,["wycls@Yc",[[1,2798,"\n"]],[2797,2797],[2798,2798]]],[1560692625990,["wycls@Yc",[[1,2799,"\n"]],[2797,2797],[2798,2798]]],[1560692639453,["wycls@Yc",[[1,2798,"![HTTP-TCPConnectionReuse]($resource/HTTP-TCPConnectionReuse.png)"]],[2798,2798],[2864,2864]]],[1560692664145,["wycls@Yc",[[1,2865,"\n"]],[2864,2864],[2865,2865]]],[1560692664319,["wycls@Yc",[[1,2865,"在HTTP 1.0中，客户端的每一个HTTP请求都必须通过独立的TCP连接进行处理，而在HTTP 1.1中，对这种方式进行了改进。客户端可以在一个TCP连接中发送多个HTTP请求，这种技术叫做HTTP复用（HTTP Multiplexing）。它与TCP连接复用最根本的区别在于，TCP连接复用是将多个客户端的HTTP请求复用到一个服务器端TCP连接上，而HTTP复用则是一个客户端的多个HTTP请求通过一个TCP连接进行处理。前者是负载均衡设备的独特功能；而后者是HTTP 1.1协议所支持的新功能，目前被大多数浏览器所支持。"]],[2865,2865],[3129,3129]]],[1560692706653,["wycls@Yc",[[1,3130,"\n"]],[3129,3129],[3130,3130]]],[1560692706842,["wycls@Yc",[[1,3131,"\n"]],[3130,3130],[3131,3131]]],[1560692707092,["wycls@Yc",[[1,3131,"有些用户和厂商喜欢采用连接复用率来评判一个负载均衡设备的TCP连接复用技术的好坏。一般来说，TCP连接复用率是指一段时间内负载均衡设备成功处理的客户端HTTP请求总数与这段时间负载均衡与服务器之间建立的TCP连接总数的比值。但是， TCP连接复用率和应用的特点、服务器设置、计算周期以及请求的发送模式等也有很大的关系，不同的应用环境下计算出来的TCP连接复用率会有很大的差异。其实，连接复用效率的关键在于负载均衡设备是否能够及时释放已经空闲的服务器端连接。有些厂商采用发送HTTP响应后等待一定时间，如果这段时间内无数据传输即释放该连接。而等待时间往往是秒级的，对于数据往返时间的毫秒级，其复用效果明显不会很好。最为有效的连接复用技术是在负载均衡设备给客户端发送HTTP响应之后，收到客户端确认ACK数据包即释放该连接。这种方式避免了任何额外的等待时间，理论上没有更高效的复用方法。"]],[3131,3131],[3522,3522]]],[1560692712548,["wycls@Yc",[[1,3177,"**"],[1,3185,"**"]],[3177,3185],[3177,3189]]],[1560692722963,["wycls@Yc",[[1,3191,"++"],[1,3246,"++"]],[3191,3246],[3191,3250]]],[1560692754259,["wycls@Yc",[[1,3337,"++"],[1,3366,"++"]],[3337,3366],[3337,3370]]],[1560692809069,["wycls@Yc",[[1,3535,"\n"]],[3534,3534],[3535,3535]]],[1560692809254,["wycls@Yc",[[1,3536,"\n"]],[3535,3535],[3536,3536]]],[1560692815047,["wycls@Yc",[[-1,3536,"\n"],[1,3537,"#"]],[3536,3536],[3537,3537]]],[1560692816471,["wycls@Yc",[[1,3537,"## 2.2 内容缓存（RAM Caching）"]],[3537,3537],[3561,3561]]],[1560692818004,["wycls@Yc",[[1,3561,"\n\n"]],[3561,3561],[3562,3562]]],[1560692837217,["wycls@Yc",[[1,3562,"内容缓存技术将应用服务器中的一些经常被用户访问的热点内容缓存在负载均衡设备的内存中。当客户端访问这些内容时，负载均衡设备截获客户端请求，从缓存中读取客户端需要的内容并将这些内容直接返回给客户端。由于是直接从内存中读取，这种技术能够提高网络用户的访问速度，并大大减轻后端服务器的负载情况。"]],[3562,3562],[3705,3705]]],[1560692858693,["wycls@Yc",[[1,3706,"\n"]],[3705,3705],[3706,3706]]],[1560692858870,["wycls@Yc",[[1,3707,"\n"]],[3706,3706],[3707,3707]]],[1560692859173,["wycls@Yc",[[1,3707,"内容缓存的工作原理非常简单，我们将通过下图用户访问logo.gif的实例来解释内容缓存的工作过程：\n\n1） 当有客户端发起对logo.gif的第一个请求时，负载均衡首先会检查本地缓存中是否存在该对象。如果不存在这个对象，负载均衡会将这个HTTP请求转发给后端的服务器；\n\n2） 服务器收到对logo.gif的HTTP请求后，将图片内容回应给负载均衡设备；\n\n3） 负载均衡设备将logo.gif对象缓存在内容缓存中，并将其发送给客户端；\n\n4） 后续的其它客户端发起对logo.gif的访问请求时，如果负载均衡检测到内容缓存中已经存在该对象，并确认该对象并未失效的话，负载均衡直接将该对象返回给客户端，而无需服务器再次发送该对象。"]],[3707,3707],[4022,4022]]],[1560692863518,["wycls@Yc",[[1,4023,"\n"]],[4022,4022],[4023,4023]]],[1560692900238,["wycls@Yc",[[1,4023,"![HTTP-RAMCaching]($resource/HTTP-RAMCaching.png)\n"]],[4023,4023],[4073,4073]]],[1560692923141,["wycls@Yc",[[1,4074,"\n"]],[4073,4073],[4074,4074]]],[1560692923903,["wycls@Yc",[[1,4074,"内容缓存技术采用了HTTP协议中的一些标准缓存处理技术，将本应保存在客户端本地浏览器缓存中的内容共享给其他用户。因此，对于客户端来说，内容缓存技术是完全透明的。最常见的对象包括：gif/jpg图片，静态的css/js/html等文本文件等。"]],[4074,4074],[4194,4194]]],[1560692926016,["wycls@Yc",[[1,4023,"\n"]],[4022,4022],[4023,4023]]],[1560692929205,["wycls@Yc",[[1,4196,"\n"]],[4195,4195],[4196,4196]]],[1560692929389,["wycls@Yc",[[1,4197,"\n"]],[4196,4196],[4197,4197]]],[1560692930650,["wycls@Yc",[[-1,4197,"\n"],[1,4198,"#"]],[4197,4197],[4198,4198]]],[1560692939901,["wycls@Yc",[[1,4198,"## 2.3 TCP缓冲机制"]],[4198,4198],[4212,4212]]],[1560693188442,["wycls@Yc",[[1,4212,"\n\n"]],[4212,4212],[4213,4213]]],[1560693489297,["wycls@Yc",[[1,4213,"TCP缓冲是为了解决后端服务器网速与客户的前端网络速度不匹配而造成的服务器资源浪费的问题。由于服务器与负载均衡设备之间的网络带宽速率高，时延小，通过将服务器端的请求缓冲在负载均衡设备的缓冲区中，防止由于客户端缓慢的网络链路和较高的时延造成服务器端连接阻塞问题。\n\n通过采用TCP缓冲技术，可以提高服务器端响应时间和处理效率，减少由于通信链路问题给服务器造成的连接负担。另外，由负载均衡设备来处理网络阻塞造成的数据包重传，使每个客户端的流量得到最佳的控制。"]],[4213,4213],[4440,4440]]],[1560693532607,["wycls@Yc",[[1,4441,"\n"]],[4440,4440],[4441,4441]]],[1560693533056,["wycls@Yc",[[1,4442,"\n"]],[4441,4441],[4442,4442]]],[1560693546532,["wycls@Yc",[[1,4442,"![HTTP-TCPBuffer]($resource/HTTP-TCPBuffer.png)\n"]],[4442,4442],[4490,4490]]],[1560693548142,["wycls@Yc",[[1,4491,"\n"]],[4490,4490],[4491,4491]]],[1560693548552,["wycls@Yc",[[1,4492,"\n"]],[4491,4491],[4492,4492]]],[1560693577875,["wycls@Yc",[[1,4491,"如上图所示，客户端与负载均衡之间采用的链路具有较高的时延和较低的带宽，而负载均衡与服务器之间采用时延较低和高带宽的局域网连接。\n\n1） 负载均衡收到客户端发来的HTTP请求并将其转发给后端的服务器进行处理；\n\n2） 服务器对请求进行处理后，将响应的内容依次返回负载均衡设备，负载均衡设备收到响应的数据包后，会将数据包依次缓存在缓冲区中，服务器的响应速度将依据负载均衡和服务器之间的链路质量；\n\n3） 当负载均衡上缓存了第一个响应的数据包后，负载均衡将响应的数据包按次序返回给客户端，此时，响应的速度将依赖于负载均衡与客户端之间的链路质量；\n\n4） 当响应内容数据包依次传送给客户端并收到客户端的ACK确认请求后，负载均衡将缓冲区资源释放出来为其它TCP连接使用。"]],[4491,4491],[4822,4822]]],[1560693604719,["wycls@Yc",[[1,4824,"\n"]],[4823,4823],[4824,4824]]],[1560693605130,["wycls@Yc",[[1,4824,"TCP缓冲技术是L7应用负载均衡的核心，它将服务器与客户端之间的TCP连接分成两个独立的TCP连接，并分别进行处理，以适应两边不同的网络环境。此外，通过TCP缓冲技术，将客户端的HTTP请求完整的接收下来并进行分析，还可以提供一些高级负载均衡的应用功能，如：URL-Hashing，URL交换（URL-Switching），基于Cookie或会话的连接保持（Cookie/Session Persistence）等等。"]],[4824,4824],[5033,5033]]],[1560693608335,["wycls@Yc",[[1,5034,"\n"]],[5033,5033],[5034,5034]]],[1560693608688,["wycls@Yc",[[1,5035,"\n"]],[5034,5034],[5035,5035]]],[1560693609993,["wycls@Yc",[[-1,5035,"\n"],[1,5036,"#"]],[5035,5035],[5036,5036]]],[1560693618385,["wycls@Yc",[[1,5036,"## HTTP压缩（HTTP Compression）"]],[5036,5036],[5063,5063]]],[1560693762819,["wycls@Yc",[[1,5063,"\n\n"]],[5063,5063],[5064,5064]]],[1560693763319,["wycls@Yc",[[1,5064,"HTTP协议在v 1.1中新增了压缩功能，如果客户端浏览器和服务器都支持压缩功能的话，通过客户端和服务器进行协商，对客户端的响应请求进行压缩处理。大幅节省内容传输时所需要的带宽，并加快客户端的响应速度。但是，压缩算法本身需要耗费大量的CPU资源，因此，负载均衡设备通过对HTTP压缩功能进行支持，减轻Web服务器的资源耗费，提高其处理效率。另外，由于负载均衡一般都采用硬件的方式进行压缩，因此，压缩的效率更高。此外，对于一些不支持HTTP压缩功能的老版本的Web服务器，通过启用负载均衡上的压缩功能，可以实现对系统的优化和加速。"]],[5064,5064],[5328,5328]]],[1560693764486,["wycls@Yc",[[1,5329,"\n"]],[5328,5328],[5329,5329]]],[1560693765319,["wycls@Yc",[[1,5330,"\n"]],[5329,5329],[5330,5330]]],[1560693813371,["wycls@Yc",[[1,5330,"![HTTP-Compression]($resource/HTTP-Compression.png)\n"]],[5330,5330],[5382,5382]]],[1560693815934,["wycls@Yc",[[1,5383,"\n"]],[5382,5382],[5383,5383]]],[1560693863570,["wycls@Yc",[[1,5384,"\n"]],[5382,5382],[5383,5383]]],[1560693863901,["wycls@Yc",[[1,5383,"如上图所示，在负载均衡上实现HTTP压缩功能的流程如下：\n\n1） 客户端与负载均衡建立TCP连接后，发送HTTP请求（如Get请求），客户端会将自身浏览器所支持的功能和配置情况发送给负载均衡，如：是否支持压缩、支持的压缩算法、是否支持Keep-alive（连接保持）、连接保持的时间等；\n\n2） 负载均衡在收到HTTP请求后，会将其中的有关压缩的标记删除，然后将请求转发给服务器进行处理；\n\n3） 服务器将响应的内容转发给负载均衡；\n\n4） 负载均衡收到响应的内容后，依照与客户端之间协商的压缩算法对响应的内容进行压缩，然后将压缩后的内容发送回客户端；\n\n5） 客户端收到响应的内容后，由浏览器对网页内容进行解压缩并进行浏览。"]],[5383,5383],[5696,5696]]],[1560693866478,["wycls@Yc",[[1,5698,"\n"]],[5696,5696],[5697,5697]]],[1560693866970,["wycls@Yc",[[1,5699,"\n"]],[5697,5697],[5698,5698]]],[1560693897035,["wycls@Yc",[[1,5698,"由于HTTP压缩采用的是HTTP v1.1协议中支持的标准压缩算法，因此，目前主流的浏览器（如：Internet Explorer，Firefox，Opera，Netscape等）均默认支持HTTP v1.1中的压缩功能。对于用户来说，无需修改浏览器配置也不需要安装任何插件。采用负载均衡来代替服务器做压缩，能够大幅节省服务器的资源，可以使服务器专注于应用的处理，从而提高业务处理量。另外，即使服务器不支持HTTP压缩，通过负载均衡也能实现压缩功能。\n\n压缩能力的大小取决于被压缩对象的性质。一般来说，HTTP压缩算法对于文本格式的内容有较好的压缩效率；而对于gif等图片格式的内容，由于本身已经进行过压缩处理，压缩效率并不高。所以，需要负载均衡支持选择性压缩，即可以根据对象的类型进行选择性压缩。"]],[5698,5698],[6047,6047]]],[1560693901069,["wycls@Yc",[[1,6049,"\n"]],[6047,6047],[6048,6048]]],[1560693901225,["wycls@Yc",[[1,6050,"\n"]],[6048,6048],[6049,6049]]],[1560693913053,["wycls@Yc",[[1,6049,"2.5 SSL加速（SSL Acceleration）"]],[6049,6049],[6076,6076]]],[1560693915036,["wycls@Yc",[[1,6049,"### "]],[6049,6049],[6053,6053]]],[1560693915875,["wycls@Yc",[[1,6082,"\n"]],[6080,6080],[6081,6081]]],[1560694036418,["wycls@Yc",[[1,6082,"一般情况下，HTTP采用明文的方式在网络上传输，有可能被非法窃听，尤其是用于认证的口令信息等。为了避免出现这样的安全问题，一般采用SSL协议（即：HTTPS）对HTTP协议进行加密，以保证整个传输过程的安全性。在SSL通信中，首先采用非对称密钥技术交换认证信息，并交换服务器和浏览器之间用于加密数据的会话密钥，然后利用该密钥对通信过程中的信息进行加密和解密。\n\nSSL是需要耗费大量CPU资源的一种安全技术。目前，大多数负载均衡设备均采用SSL加速芯片进行SSL信息的处理。这种方式比传统的采用服务器的SSL加密方式提供更高的SSL处理性能，从而节省大量的服务器资源，使服务器能够专注于业务请求的处理。另外，采用集中的SSL处理，还能够简化对证书的管理，减少日常管理的工作量。"]],[6082,6082],[6420,6420]]],[1560694039119,["wycls@Yc",[[-1,6081,"\n"]],[6081,6081],[6080,6080]]],[1560694042668,["wycls@Yc",[[1,6420,"\n"]],[6419,6419],[6420,6420]]],[1560694042877,["wycls@Yc",[[1,6421,"\n"]],[6420,6420],[6421,6421]]],[1560694115282,["wycls@Yc",[[1,6421,"![HTTP-SSL]($resource/HTTP-SSL.png)\n"]],[6421,6421],[6457,6457]]],[1560694117484,["wycls@Yc",[[1,6458,"\n"]],[6457,6457],[6458,6458]]],[1560694129103,["wycls@Yc",[[1,6458,"SSL的处理流程如下：\n\n1） 客户端发起HTTPS连接请求，协商传输的加密算法，确认双方身份，并交换会话密钥。\n\n2） 负载均衡收到客户端加密的HTTPS请求后，对请求的信息进行解密，然后通过HTTP的方式发送给后端的服务器。\n\n3） 服务器将请求的处理结果返回给负载均衡设备。\n\n4） 负载均衡设备利用会话密钥对请求的结果进行加密，然后将结果返回给客户端。\n\n5） 客户端采用会话密钥对返回结果进行解密，并显示在浏览器上。"]],[6458,6458],[6671,6671]]],[1560694149733,["wycls@Yc",[[1,6672,"\n"]],[6671,6671],[6672,6672]]],[1560694149904,["wycls@Yc",[[1,6673,"\n"]],[6672,6672],[6673,6673]]],[1560694150202,["wycls@Yc",[[1,6673,"在负载均衡设备中实现SSL加速功能，只需要在负载均衡设备上导入SSL证书和密钥即可。当客户端发起对虚拟服务器的HTTPS请求时，负载均衡设备自动和客户端进行SSL协议的协商并交换会话密钥。客户端发送的请求以及负载均衡返回的响应均采用会话密钥进行加密，而负载均衡设备与后端服务器之间则采用HTTP的方式进行请求的发送和处理。"]],[6673,6673],[6834,6834]]],[1560694153448,["wycls@Yc",[[1,6835,"\n"]],[6834,6834],[6835,6835]]],[1560694153601,["wycls@Yc",[[1,6836,"\n"]],[6835,6835],[6836,6836]]],[1560694155382,["wycls@Yc",[[-1,6836,"\n"],[1,6837,"#"]],[6836,6836],[6837,6837]]],[1560694165201,["wycls@Yc",[[1,6837,"# 3\\. 在实际环境中应用负载均衡产品需要注意的问题"]],[6837,6837],[6864,6864]]],[1560694167464,["wycls@Yc",[[-1,6840,"\\."]],[6842,6842],[6840,6840]]],[1560694168849,["wycls@Yc",[[1,6862,"\n\n"]],[6862,6862],[6863,6863]]],[1560694244196,["wycls@Yc",[[1,6863,"负载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S."]],[6863,6863],[7655,7655]]],[1560694244196,["wycls@Yc",[[1,6863,"负载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S."]],[6863,6863],[7655,7655]]],[1560694289603,[null,[[-1,7655,"负载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S."]],[7655,7655],[7655,7655]]],[1560694289603,[null,[[1,7655,"负载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S."]],[7655,7655],[7655,7655]]],[1560694279938,["wycls@Yc",[[-1,7651,"E.S."]],[7655,7655],[7651,7651]]],[1560694280201,["wycls@Yc",[[-1,7651,"\n"]],[7651,7651],[7650,7650]]],[1560694281640,["wycls@Yc",[[1,7650,"©著作权归作者所有：来自51CTO博客作者virtualadc的原创作品，如需转载，请与作者联系，否则将追究法律责任"]],[7650,7650],[7708,7708]]],[1560694284946,["wycls@Yc",[[1,7650,"\n"]],[7649,7649],[7650,7650]]],[1560694296454,[null,[[-1,7710,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7710,7710],[7710,7710]]],[1560694296454,[null,[[1,7710,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7710,7710],[7710,7710]]],[1560694294656,["wycls@Yc",[[-1,7651,"©著作权归作者所有：来自51CTO博客作者virtualadc的原创作品，如需转载，请与作者联系，否则将追究法律责任"]],[7651,7709],[7651,7651]]],[1560694295397,["wycls@Yc",[[-1,7651,"\n"]],[7651,7651],[7650,7650]]],[1560694434156,[null,[[-1,7651,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7651,7651],[7651,7651]]],[1560694434156,[null,[[1,7651,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7651,7651],[7651,7651]]],[1560694431200,["wycls@Yc",[[1,7651,"\n"]],[7650,7650],[7651,7651]]],[1560694431513,["wycls@Yc",[[1,7652,"\n"]],[7651,7651],[7652,7652]]],[1560694432718,["wycls@Yc",[[-1,7652,"\n"],[1,7653,"#"]],[7652,7652],[7653,7653]]],[1560694433120,["wycls@Yc",[[1,7653," "]],[7653,7653],[7654,7654]]],[1560694441878,[null,[[-1,7654,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7654,7654],[7654,7654]]],[1560694441878,[null,[[1,7654,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7654,7654],[7654,7654]]],[1560694440778,["wycls@Yc",[[1,7654,"一次完整的HTTP事务是怎样一个过程？"]],[7654,7654],[7673,7673]]],[1560694449811,[null,[[-1,7673,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7673,7673],[7673,7673]]],[1560694449811,[null,[[1,7673,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7673,7673],[7673,7673]]],[1560694446550,["wycls@Yc",[[-1,7665,"是怎样一个"]],[7665,7670],[7665,7665]]],[1560694447686,["wycls@Yc",[[-1,7667,"？"]],[7668,7668],[7667,7667]]],[1560694448690,["wycls@Yc",[[1,7667,"\n\n"]],[7667,7667],[7668,7668]]],[1560694473515,[null,[[-1,7669,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7669,7669],[7669,7669]]],[1560694473515,[null,[[1,7669,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7669,7669],[7669,7669]]],[1560694472464,["wycls@Yc",[[1,7668,"https://blog.51cto.com/linux5588/1351007"]],[7668,7668],[7708,7708]]],[1560694475619,[null,[[-1,7709,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7709,7709],[7709,7709]]],[1560694475619,[null,[[1,7709,"载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\nE.S.\n"]],[7709,7709],[7709,7709]]],[1560694474574,["wycls@Yc",[[1,7709,"\n"]],[7708,7708],[7709,7709]]]],null,"wycls@Yc"],["b39208ba-a4bf-4b4c-9ea1-30257a68ca52",1560698391362,"# [利用HTTP Cache来优化网站](https://www.cnblogs.com/cocowool/archive/2011/08/22/2149929.html)\n\n## **什么是缓存？**\n\n缓存是一个到处都存在的用空间换时间的例子。\n通过使用多余的空间，我们能够获取更快的速度。用户在浏览网站的时候，浏览器能够在本地保存网站中的图片或者其他文件的副本，这样用户再次访问该网站的时候，浏览器就不用再下载全部的文件，减少了下载量意味着提高了页面加载的速度。\n\n![HTTP浏览器与服务器之间交互]($resource/HTTP%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8E%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E9%97%B4%E4%BA%A4%E4%BA%92.png)\n\n## **缓存的缺点**\n\n缓存非常有用，但是也带来了一定的缺陷。当我们的网站发生了更新的时候，比如说Logo换了，浏览器本地仍保存着旧版本的Logo，那么浏览器如何来确定使用本地文件还是使用服务器上的新文件？下面来介绍几种判断的方法。\n\n### Caching Method 1：Last-Modified\n\n![CacheMethod1]($resource/CacheMethod1.png)\n\n\n### Caching Method 2: ETag\n通常情况下，通过修改时间来比较文件是可行的。但是在一些特殊情况，例如服务器的时钟发生了错误，服务器时钟进行修改，夏时制DST到来后服务器时间没有及时更新，这些都会引起通过修改时间比较文件版本的问题。\n\nETag可以用来解决这种问题。ETag是一个文件的唯一标志符。就像一个哈希或者指纹，每个文件都有一个单独的标志，只要这个文件发生了改变，这个标志就会发生变化。\n\n![CacheMethod2]($resource/CacheMethod2.png)\n\n\n### Caching Method 3：Expires\n缓存一个文件，并且与服务器确认版本的方式非常好，但是仍有一个缺点，我们必须连接服务器。每次使用前都进行一次比较，这种方法很安全，但还不是最好的。我们可以使用 Expiration Date 来减少这种请求。\n\n![CacheMethod3]($resource/CacheMethod3.png)\n\n### Caching Method 4：Max-age\nExpires的方法很好，但是我们每次都得算一个精确的时间。max-age 标签可以让我们更加容易的处理过期时间。我们只需要说，这份资料你只能用一个星期就可以了。\n\nMax-age 使用秒来计量，下面是一些常用的单位：\n\n1 days in seconds = 86400\n\n1 week in seconds = 604800\n\n1 month in seconds = 2629000\n\n1 year in seconds = 31536000\n\n## **额外的标签**\n\n缓存标签永远不会停止工作，但是有时候我们需要对已经缓存的内容进行一些控制。\n\n     Cache-control: public 表示缓存的版本可以被代理服务器或者其他中间服务器识别。\n\n     Cache-control: private 意味着这个文件对不同的用户是不同的。只有用户自己的浏览器能够进行缓存，公共的代理服务器不允许缓存。\n\n     Cache-control: no-cache 意味着文件的内容不应当被缓存。这在搜索或者翻页结果中非常有用，因为同样的URL，对应的内容会发生变化。\n\n注意：有些标签只是在支持HTTP/1.1的浏览器上可用，如果想要了解更多，那么推荐RFC2616以及[Cache docs](http://www.mnot.net/cache_docs/)。\n\n\n# 利用负载均衡优化和加速HTTP应用\nhttps://blog.51cto.com/virtualadc/580832\n\n## 1.负载均衡技术简介\n\n现代企业信息化应用越来越多的采用B/S应用架构来承载企业的关键业务，因此，确保这些任务的可靠运行就变得日益重要。随着越来越多的企业实施数据集中，应用的扩展性、安全性和可靠性也越来越受到企业的重视。\n\n负载均衡技术通过设置虚拟服务器IP（VIP），将后端多台真实服务器的应用资源虚拟成一台高性能的应用服务器，通过负载均衡算法，将大量来自客户端的应用请求分配到后端的服务器进行处理。负载均衡设备持续的对服务器上的应用状态进行检查，并自动对无效的应用服务器进行隔离，实现了一个简单、扩展性强、可靠性高的应用解决方案。解决了单台服务器处理性能不足，扩展性不够，可靠性较低的问题。\n\n近年来，随着Web2.0和B/S技术的迅猛发展，HTTP应用逐渐成为当今的主流应用，而负载均衡技术也有了很大的发展。从传统的基于四层端口号进行简单的应用请求转发，到目前基于七层内容进行请求的转发和处理。尤其是在HTTP协议的优化和加速方面，一些技术逐渐发展成熟，如：TCP连接复用、内容缓存、TCP缓冲、HTTP压缩、SSL加速等。这些技术的应用有助于进一步改善用户访问响应时间、节约广域网链路带宽和服务器资源。\n\n## 2 HTTP优化和加速特性带来的优势\n\n### 2.1 TCP 连接复用（TCP Connection Reuse）\nTCP连接复用技术通过将前端多个客户的HTTP请求复用到后端与服务器建立的一个TCP连接上。这种技术能够大大减小服务器的性能负载，减少与服务器之间新建TCP连接所带来的延时，并最大限度的降低客户端对后端服务器的并发连接数请求，减少服务器的资源占用。\n\n一般情况下，客户端在发送HTTP请求之前需要先与服务器进行TCP三次握手，建立TCP连接，然后发送HTTP请求。服务器收到HTTP请求后进行处理，并将处理的结果发送回客户端，然后客户端和服务器互相发送FIN并在收到FIN的ACK确认后关闭连接。在这种方式下，一个简单的HTTP请求需要十几个TCP数据包才能处理完成。\n\n采用TCP连接复用技术后，客户端（如：ClientA）与负载均衡设备之间进行三次握手并发送HTTP请求。负载均衡设备收到请求后，会检测服务器是否存在空闲的长连接，如果不存在，服务器将建立一个新连接。当HTTP请求响应完成后，客户端则与负载均衡设备协商关闭连接，而负载均衡则保持与服务器之间的这个连接。当有其它客户端（如：ClientB）需要发送HTTP请求时，负载均衡设备会直接向与服务器之间保持的这个空闲连接发送HTTP请求，避免了由于新建TCP连接造成的延时和服务器资源耗费。\n\n![HTTP-TCPConnectionReuse]($resource/HTTP-TCPConnectionReuse.png)\n\n在HTTP 1.0中，客户端的每一个HTTP请求都必须通过独立的TCP连接进行处理，而在HTTP 1.1中，对这种方式进行了改进。客户端可以在一个TCP连接中发送多个HTTP请求，这种技术叫做HTTP复用（HTTP Multiplexing）。它与TCP连接复用最根本的区别在于，TCP连接复用是将多个客户端的HTTP请求复用到一个服务器端TCP连接上，而HTTP复用则是一个客户端的多个HTTP请求通过一个TCP连接进行处理。前者是负载均衡设备的独特功能；而后者是HTTP 1.1协议所支持的新功能，目前被大多数浏览器所支持。\n\n有些用户和厂商喜欢采用连接复用率来评判一个负载均衡设备的TCP连接复用技术的好坏。一般来说，**TCP连接复用率**是指++一段时间内负载均衡设备成功处理的客户端HTTP请求总数与这段时间负载均衡与服务器之间建立的TCP连接总数的比值++。但是， TCP连接复用率和应用的特点、服务器设置、计算周期以及请求的发送模式等也有很大的关系，不同的应用环境下计算出来的TCP连接复用率会有很大的差异。其实，连接复用效率的++关键在于负载均衡设备是否能够及时释放已经空闲的服务器端连接++。有些厂商采用发送HTTP响应后等待一定时间，如果这段时间内无数据传输即释放该连接。而等待时间往往是秒级的，对于数据往返时间的毫秒级，其复用效果明显不会很好。最为有效的连接复用技术是在负载均衡设备给客户端发送HTTP响应之后，收到客户端确认ACK数据包即释放该连接。这种方式避免了任何额外的等待时间，理论上没有更高效的复用方法。\n\n### 2.2 内容缓存（RAM Caching）\n内容缓存技术将应用服务器中的一些经常被用户访问的热点内容缓存在负载均衡设备的内存中。当客户端访问这些内容时，负载均衡设备截获客户端请求，从缓存中读取客户端需要的内容并将这些内容直接返回给客户端。由于是直接从内存中读取，这种技术能够提高网络用户的访问速度，并大大减轻后端服务器的负载情况。\n\n内容缓存的工作原理非常简单，我们将通过下图用户访问logo.gif的实例来解释内容缓存的工作过程：\n\n1） 当有客户端发起对logo.gif的第一个请求时，负载均衡首先会检查本地缓存中是否存在该对象。如果不存在这个对象，负载均衡会将这个HTTP请求转发给后端的服务器；\n\n2） 服务器收到对logo.gif的HTTP请求后，将图片内容回应给负载均衡设备；\n\n3） 负载均衡设备将logo.gif对象缓存在内容缓存中，并将其发送给客户端；\n\n4） 后续的其它客户端发起对logo.gif的访问请求时，如果负载均衡检测到内容缓存中已经存在该对象，并确认该对象并未失效的话，负载均衡直接将该对象返回给客户端，而无需服务器再次发送该对象。\n\n![HTTP-RAMCaching]($resource/HTTP-RAMCaching.png)\n\n内容缓存技术采用了HTTP协议中的一些标准缓存处理技术，将本应保存在客户端本地浏览器缓存中的内容共享给其他用户。因此，对于客户端来说，内容缓存技术是完全透明的。最常见的对象包括：gif/jpg图片，静态的css/js/html等文本文件等。\n\n### 2.3 TCP缓冲机制\nTCP缓冲是为了解决后端服务器网速与客户的前端网络速度不匹配而造成的服务器资源浪费的问题。由于服务器与负载均衡设备之间的网络带宽速率高，时延小，通过将服务器端的请求缓冲在负载均衡设备的缓冲区中，防止由于客户端缓慢的网络链路和较高的时延造成服务器端连接阻塞问题。\n\n通过采用TCP缓冲技术，可以提高服务器端响应时间和处理效率，减少由于通信链路问题给服务器造成的连接负担。另外，由负载均衡设备来处理网络阻塞造成的数据包重传，使每个客户端的流量得到最佳的控制。\n\n![HTTP-TCPBuffer]($resource/HTTP-TCPBuffer.png)\n\n如上图所示，客户端与负载均衡之间采用的链路具有较高的时延和较低的带宽，而负载均衡与服务器之间采用时延较低和高带宽的局域网连接。\n\n1） 负载均衡收到客户端发来的HTTP请求并将其转发给后端的服务器进行处理；\n\n2） 服务器对请求进行处理后，将响应的内容依次返回负载均衡设备，负载均衡设备收到响应的数据包后，会将数据包依次缓存在缓冲区中，服务器的响应速度将依据负载均衡和服务器之间的链路质量；\n\n3） 当负载均衡上缓存了第一个响应的数据包后，负载均衡将响应的数据包按次序返回给客户端，此时，响应的速度将依赖于负载均衡与客户端之间的链路质量；\n\n4） 当响应内容数据包依次传送给客户端并收到客户端的ACK确认请求后，负载均衡将缓冲区资源释放出来为其它TCP连接使用。\n\nTCP缓冲技术是L7应用负载均衡的核心，它将服务器与客户端之间的TCP连接分成两个独立的TCP连接，并分别进行处理，以适应两边不同的网络环境。此外，通过TCP缓冲技术，将客户端的HTTP请求完整的接收下来并进行分析，还可以提供一些高级负载均衡的应用功能，如：URL-Hashing，URL交换（URL-Switching），基于Cookie或会话的连接保持（Cookie/Session Persistence）等等。\n\n### HTTP压缩（HTTP Compression）\nHTTP协议在v 1.1中新增了压缩功能，如果客户端浏览器和服务器都支持压缩功能的话，通过客户端和服务器进行协商，对客户端的响应请求进行压缩处理。大幅节省内容传输时所需要的带宽，并加快客户端的响应速度。但是，压缩算法本身需要耗费大量的CPU资源，因此，负载均衡设备通过对HTTP压缩功能进行支持，减轻Web服务器的资源耗费，提高其处理效率。另外，由于负载均衡一般都采用硬件的方式进行压缩，因此，压缩的效率更高。此外，对于一些不支持HTTP压缩功能的老版本的Web服务器，通过启用负载均衡上的压缩功能，可以实现对系统的优化和加速。\n\n![HTTP-Compression]($resource/HTTP-Compression.png)\n\n如上图所示，在负载均衡上实现HTTP压缩功能的流程如下：\n\n1） 客户端与负载均衡建立TCP连接后，发送HTTP请求（如Get请求），客户端会将自身浏览器所支持的功能和配置情况发送给负载均衡，如：是否支持压缩、支持的压缩算法、是否支持Keep-alive（连接保持）、连接保持的时间等；\n\n2） 负载均衡在收到HTTP请求后，会将其中的有关压缩的标记删除，然后将请求转发给服务器进行处理；\n\n3） 服务器将响应的内容转发给负载均衡；\n\n4） 负载均衡收到响应的内容后，依照与客户端之间协商的压缩算法对响应的内容进行压缩，然后将压缩后的内容发送回客户端；\n\n5） 客户端收到响应的内容后，由浏览器对网页内容进行解压缩并进行浏览。\n\n由于HTTP压缩采用的是HTTP v1.1协议中支持的标准压缩算法，因此，目前主流的浏览器（如：Internet Explorer，Firefox，Opera，Netscape等）均默认支持HTTP v1.1中的压缩功能。对于用户来说，无需修改浏览器配置也不需要安装任何插件。采用负载均衡来代替服务器做压缩，能够大幅节省服务器的资源，可以使服务器专注于应用的处理，从而提高业务处理量。另外，即使服务器不支持HTTP压缩，通过负载均衡也能实现压缩功能。\n\n压缩能力的大小取决于被压缩对象的性质。一般来说，HTTP压缩算法对于文本格式的内容有较好的压缩效率；而对于gif等图片格式的内容，由于本身已经进行过压缩处理，压缩效率并不高。所以，需要负载均衡支持选择性压缩，即可以根据对象的类型进行选择性压缩。\n\n### 2.5 SSL加速（SSL Acceleration）\n一般情况下，HTTP采用明文的方式在网络上传输，有可能被非法窃听，尤其是用于认证的口令信息等。为了避免出现这样的安全问题，一般采用SSL协议（即：HTTPS）对HTTP协议进行加密，以保证整个传输过程的安全性。在SSL通信中，首先采用非对称密钥技术交换认证信息，并交换服务器和浏览器之间用于加密数据的会话密钥，然后利用该密钥对通信过程中的信息进行加密和解密。\n\nSSL是需要耗费大量CPU资源的一种安全技术。目前，大多数负载均衡设备均采用SSL加速芯片进行SSL信息的处理。这种方式比传统的采用服务器的SSL加密方式提供更高的SSL处理性能，从而节省大量的服务器资源，使服务器能够专注于业务请求的处理。另外，采用集中的SSL处理，还能够简化对证书的管理，减少日常管理的工作量。\n\n![HTTP-SSL]($resource/HTTP-SSL.png)\n\nSSL的处理流程如下：\n\n1） 客户端发起HTTPS连接请求，协商传输的加密算法，确认双方身份，并交换会话密钥。\n\n2） 负载均衡收到客户端加密的HTTPS请求后，对请求的信息进行解密，然后通过HTTP的方式发送给后端的服务器。\n\n3） 服务器将请求的处理结果返回给负载均衡设备。\n\n4） 负载均衡设备利用会话密钥对请求的结果进行加密，然后将结果返回给客户端。\n\n5） 客户端采用会话密钥对返回结果进行解密，并显示在浏览器上。\n\n在负载均衡设备中实现SSL加速功能，只需要在负载均衡设备上导入SSL证书和密钥即可。当客户端发起对虚拟服务器的HTTPS请求时，负载均衡设备自动和客户端进行SSL协议的协商并交换会话密钥。客户端发送的请求以及负载均衡返回的响应均采用会话密钥进行加密，而负载均衡设备与后端服务器之间则采用HTTP的方式进行请求的发送和处理。\n\n## 3 在实际环境中应用负载均衡产品需要注意的问题\n负载均衡设备提供的这些HTTP优化和加速功能，能够大大的降低客户端的响应时间，降低带宽利用率，并且能降低服务器端负载情况，节省服务器资源。但是，目前主流的负载均衡产品在同时开启多个HTTP优化和加速功能时，设备的处理性能会大大降低。尽管各个厂家均宣称自己的设备有较高的性能处理指标，并通过第三方的测评机构公布一些产品性能测试数据，但是，这些数据一般都是在一些特别设置的实验环境下测试出来的，只能作为不同厂商产品之间性能对比的依据，而不能作为用户实际应用环境的选型依据。\n\n此外，大多数厂商都采用基本硬件平台上加装功能卡或购买许可证的方式提供这些HTTP的优化和加速功能。如果用户想在应用加速的整体解决方案中采用这些功能，需要花费更多的采购成本。对于用户来说，这些高级特性和功能如同水中之月，可望而不可及。因此，在选购负载均衡产品的时候，一定要了解自己的应用究竟需要采用哪些功能特性，而实现这些特性又需要哪些额外的费用。\n\nA10 Networks的AX系列高级流量管理器采用目前主流的高性能多核CPU进行设计开发，通过结合四层流量处理ASIC和自主研发的ACOS系统，提供无比的性能优势，尤其是在开启多个优化和加速特性后，仍能保持较高的处理性能。2008年1月，在Tolly Group的测试中，单台AX设备实现了每秒百万的交易处理量，是截至目前唯一实现每秒百万级交易处理量的负载均衡设备。AX以其卓越的性能为客户提供最佳性价比，并提供最大的每瓦特性能，满足当今绿色计算对节能的要求。此外，AX产品采用all-in-one的销售模式，在单台硬件设备中提供所有的高级功能特性，如：内容缓存，HTTP压缩，SSL加速，IPv6，GSLB等。这些功能已经内置在AX的ACOS系统之中，不需要用户花费任何额外的费用。AX这种新的销售模式可以为用户带来巨大的利益，节省用户投资成本。\n\n\n# 一次完整的HTTP事务过程\nhttps://blog.51cto.com/linux5588/1351007\n\n",[[1560698378116,["wycls@Yc",[[1,7710,"\n"]],[7709,7709],[7710,7710]]],[1560698378327,["wycls@Yc",[[1,7711,"\n"]],[7710,7710],[7711,7711]]],[1560698378838,["wycls@Yc",[[1,7711,"当我们在浏览器的地址栏输入 [www.linux178.com](http://www.linux178.com/ \"www.linux178.com\") ，然后回车，回车这一瞬间到看到页面到底发生了什么呢？\n\n以下过程仅是个人理解：\n\n域名解析 --> 发起TCP的3次握手 --> 建立TCP连接后发起http请求 --> 服务器响应http请求，浏览器得到html代码 --> 浏览器解析html代码，并请求html代码中的资源（如js、css、图片等） --> 浏览器对页面进行渲染呈现给用户"]],[7711,7711],[7961,7961]]],[1560698388350,["wycls@Yc",[[-1,7829,"\n"]],[7829,7829],[7828,7828]]],[1560698403742,["wycls@Yc",[[1,7961,"\n"]],[7960,7960],[7961,7961]]],[1560698404044,["wycls@Yc",[[1,7962,"\n"]],[7961,7961],[7962,7962]]],[1560698405235,["wycls@Yc",[[1,7962,"关于HTTP协议可以参考以下：\n\nHTTP协议漫谈  http://kb.cnblogs.com/page/140611/\n\nHTTP协议概览  http://www.cnblogs.com/vamei/archive/2013/05/11/3069788.html\n\n了解HTTP Headers的方方面面  [http://kb.cnblogs.com/page/55442/](http://kb.cnblogs.com/page/55442/)"]],[7962,7962],[8188,8188]]],[1560698407430,["wycls@Yc",[[-1,8024,"\n"]],[8024,8024],[8023,8023]]],[1560698408294,["wycls@Yc",[[-1,8095,"\n"]],[8095,8095],[8094,8094]]],[1560698409454,["wycls@Yc",[[-1,7978,"\n"]],[7978,7978],[7977,7977]]],[1560698467263,["wycls@Yc",[[1,8186,"\n"]],[8185,8185],[8186,8186]]],[1560698467517,["wycls@Yc",[[1,8187,"\n"]],[8186,8186],[8187,8187]]],[1560698475408,["wycls@Yc",[[1,8187,"以下就是上面过程的一一分析，我们就以Chrome浏览器为例："]],[8187,8187],[8217,8217]]],[1560698476430,["wycls@Yc",[[1,8218,"\n"]],[8217,8217],[8218,8218]]],[1560698496083,["wycls@Yc",[[1,8218,"**1.域名解析**\n\n首先Chrome浏览器会解析 www.linux178.com 这个域名（准确的叫法应该是主机名）对应的IP地址。怎么解析到对应的IP地址"]],[8218,8218],[8299,8299]]],[1560698501041,["wycls@Yc",[[-1,7987," "],[1,7988," "],[-1,8032," "],[1,8033," "],[-1,8114," "],[1,8115," "],[1,8218,"## "]],[8218,8218],[8221,8221]]],[1560698507646,["wycls@Yc",[[-1,8290,"怎么解析到对应的IP地址"]],[8290,8302],[8290,8290]]],[1560698546333,["wycls@Yc",[[-1,8187,"以下就是上面过程的一一分析，我们就以Chrome浏览器为例：\n## **1.域名解析**\n\n首先Chrome浏览器会解析 www.linux178.com 这个域名（准确的叫法应该是主机名）对应的IP地址。\n"]],[8186,8290],[8186,8186]]],[1560698547110,["wycls@Yc",[[-1,8186,"\n"]],[8186,8186],[8185,8185]]],[1560698552132,["wycls@Yc",[[-1,7710,"\n"]],[7710,7710],[7709,7709]]],[1560699261072,["wycls@Yc",[[1,8185,"\n"]],[8184,8184],[8185,8185]]],[1560699261286,["wycls@Yc",[[1,8186,"\n"]],[8185,8185],[8186,8186]]],[1560699261687,["wycls@Yc",[[1,8186,"MIME（Multipurpose Internet Mail Extesions 多用途互联网邮件扩展）是一个互联网标准，它扩展了电子邮件标准，使其能够支持非ASCII字符、二进制格式附件等多种格式的邮件消息，这个标准被定义在RFC 2045、RFC 2046、RFC 2047、RFC 2048、RFC 2049等RFC中。 由RFC 822转变而来的RFC 2822，规定电子邮件标准并不允许在邮件消息中使用7位ASCII字符集以外的字符。正因如此，一些非英语字符消息和二进制文件，图像，声音等非文字消息都不能在电子邮件中传输。MIME规定了用于表示各种各样的数据类型的符号化方法。 此外，在万维网中使用的HTTP协议中也使用了MIME的框架，标准被扩展为互联网媒体类型。"]],[8186,8186],[8525,8525]]],[1560699271121,["wycls@Yc",[[1,8526,"\n"]],[8525,8525],[8526,8526]]],[1560699271378,["wycls@Yc",[[1,8526,"MIME 遵循以下格式：major/minor 主类型/次类型 例如：\n\n```bash\np_w_picpath/jpg\np_w_picpath/gif\ntext/html\nvideo/quicktime\nappliation/x-httpd-php\n```"]],[8526,8526],[8655,8655]]],[1560699275576,["wycls@Yc",[[-1,8562,"\n"]],[8562,8562],[8561,8561]]]],null,"wycls@Yc"]]}