{"compress":true,"commitItems":[["0fd90c9d-1bc9-4916-98de-8c952401cf7d",1561089014648,"# Lorem ipsum\n\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien.",[[1561088978894,["yongchao@yongchao-PC",[[1,420,"# [COleDateTime类型的应用](https://www.cnblogs.com/carekee/articles/1948298.html)\n\n使用COleDateTime类\n1) 获取当前时间。\n      CTime time;\n      time = CTime::GetCurrentTime();\n2) 获取时间元素。\n      int year = time.GetYear() ;\n      int month = time.GetMonth();\n      int day = time.GetDay();\n      int hour = time.GetHour();\n      int minute = time.GetMinute();\n      int second = time.GetSecond();\n      int DayOfWeek = time.GetDayOfWeek() ;\n3) 获取时间间隔。\n      CTimeSpan timespan(0,0,1,0); // days,hours,minutes,seconds\n      timespan = CTime::GetCurrentTime() - time;\n4) 把时间转换为字符串。\n      CString sDate,sTime,sElapsed Time ;\n      sDate = time.Format(\"%m/%d/%y\"); //ex: 12/10/98\n      sTime = time.Format(\"%H:%M:%S\"); //ex: 9:12:02\n      sElapsed Time = timespan.Format(\"%D:%H:%M:%S\"); // %D is total elapsed days\n5) 把字符串转换为时间。\n         CString sDateTime;\n         int nYear, nMonth, nDate, nHour, nMin, nSec;\n         sscanf(sDateTime, \"%d-%d-%d %d:%d:%d\", &nYear, &nMonth, &nDate, &nHour, &nMin, &nSec);\n         CTime sTime(nYear, nMonth, nDate, nHour, nMin, nSec);\n要想知道更多的时间格式，参见MFC文档中的strftime\n\n使用COleDateTime类\n1) 获得一年中的某一天。\n      COleDateTime datetime;\n      datetime = COleDateTime::GetCurrentTime();\n      int DayOfYear = datetime.GetDayOfYear();\n2) 从文本串中读取时间。\n      COleDateTime datetime;\n      datetime.ParseDateTime(\"12:12:23 27 January 93\");\n3) 获取时间间隔。\n         //比方计算日期差\n         COleDateTime begin_date(1970, 1, 1, 0, 0, 0);\n         COleDateTime end_date(1990, 1, 1, 0, 0, 0);\n         COleDateTimeSpan timeSpan;    //计算时间差\n         timeSpan = end_date - begin_date;\n         long expi_date = timeSpan.GetDays();\n\n说明\n■ CTime和COleDateTime具有几乎同样的功能。然而，COleDateTime允许用户获得一年中的某一天(创建Julian日期的一种好方法)，以及分析一个时间文本串。\n■ 与CTime相比， COleDateTime的优点在于它支持DWORD变量。COleDateTime使用的位数是双浮点的两倍，既然CTime只是简单地计算从1970年1月1日之后经过的秒数，所以到了2037年它将达到4294967295，从而不能再使用。相反,COleDateTime是一个\n浮点数，它表示是从1900年12月30号之后的天数(小时是天的小数部分)，几千年之内不会溢出。"]],[420,420],[2316,2316]]],[1561089003385,["yongchao@yongchao-PC",[[-1,420,"# [COleDateTime类型的应用](https://www.cnblogs.com/carekee/articles/1948298.html)\n\n使用COleDateTime类\n1) 获取当前时间。\n      CTime time;\n      time = CTime::GetCurrentTime();\n2) 获取时间元素。\n      int year = time.GetYear() ;\n      int month = time.GetMonth();\n      int day = time.GetDay();\n      int hour = time.GetHour();\n      int minute = time.GetMinute();\n      int second = time.GetSecond();\n      int DayOfWeek = time.GetDayOfWeek() ;\n3) 获取时间间隔。\n      CTimeSpan timespan(0,0,1,0); // days,hours,minutes,seconds\n      timespan = CTime::GetCurrentTime() - time;\n4) 把时间转换为字符串。\n      CString sDate,sTime,sElapsed Time ;\n      sDate = time.Format(\"%m/%d/%y\"); //ex: 12/10/98\n      sTime = time.Format(\"%H:%M:%S\"); //ex: 9:12:02\n      sElapsed Time = timespan.Format(\"%D:%H:%M:%S\"); // %D is total elapsed days\n5) 把字符串转换为时间。\n         CString sDateTime;\n         int nYear, nMonth, nDate, nHour, nMin, nSec;\n         sscanf(sDateTime, \"%d-%d-%d %d:%d:%d\", &nYear, &nMonth, &nDate, &nHour, &nMin, &nSec);\n         CTime sTime(nYear, nMonth, nDate, nHour, nMin, nSec);\n要想知道更多的时间格式，参见MFC文档中的strftime\n\n使用COleDateTime类\n1) 获得一年中的某一天。\n      COleDateTime datetime;\n      datetime = COleDateTime::GetCurrentTime();\n      int DayOfYear = datetime.GetDayOfYear();\n2) 从文本串中读取时间。\n      COleDateTime datetime;\n      datetime.ParseDateTime(\"12:12:23 27 January 93\");\n3) 获取时间间隔。\n         //比方计算日期差\n         COleDateTime begin_date(1970, 1, 1, 0, 0, 0);\n         COleDateTime end_date(1990, 1, 1, 0, 0, 0);\n         COleDateTimeSpan timeSpan;    //计算时间差\n         timeSpan = end_date - begin_date;\n         long expi_date = timeSpan.GetDays();\n\n说明\n■ CTime和COleDateTime具有几乎同样的功能。然而，COleDateTime允许用户获得一年中的某一天(创建Julian日期的一种好方法)，以及分析一个时间文本串。\n■ 与CTime相比， COleDateTime的优点在于它支持DWORD变量。COleDateTime使用的位数是双浮点的两倍，既然CTime只是简单地计算从1970年1月1日之后经过的秒数，所以到了2037年它将达到4294967295，从而不能再使用。相反,COleDateTime是一个\n浮点数，它表示是从1900年12月30号之后的天数(小时是天的小数部分)，几千年之内不会溢出。"]],[2316,2316],[420,420]]],[1561089005907,["yongchao@yongchao-PC",[[-1,15,"Interdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue."],[-1,191,"\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien."]],[15,420],[15,15]]],[1561089006388,["yongchao@yongchao-PC",[[1,15,"# [COleDateTime类型的应用](https://www.cnblogs.com/carekee/articles/1948298.html)\n\n使用COleDateTime类\n1) 获取当前时间。\n      CTime time;\n      time = CTime::GetCurrentTime();\n2) 获取时间元素。\n      int year = time.GetYear() ;\n      int month = time.GetMonth();\n      int day = time.GetDay();\n      int hour = time.GetHour();\n      int minute = time.GetMinute();\n      int second = time.GetSecond();\n      int DayOfWeek = time.GetDayOfWeek() ;\n3) 获取时间间隔。\n      CTimeSpan timespan(0,0,1,0); // days,hours,minutes,seconds\n      timespan = CTime::GetCurrentTime() - time;\n4) 把时间转换为字符串。\n      CString sDate,sTime,sElapsed Time ;\n      sDate = time.Format(\"%m/%d/%y\"); //ex: 12/10/98\n      sTime = time.Format(\"%H:%M:%S\"); //ex: 9:12:02\n      sElapsed Time = timespan.Format(\"%D:%H:%M:%S\"); // %D is total elapsed days\n5) 把字符串转换为时间。\n         CString sDateTime;\n         int nYear, nMonth, nDate, nHour, nMin, nSec;\n         sscanf(sDateTime, \"%d-%d-%d %d:%d:%d\", &nYear, &nMonth, &nDate, &nHour, &nMin, &nSec);\n         CTime sTime(nYear, nMonth, nDate, nHour, nMin, nSec);\n要想知道更多的时间格式，参见MFC文档中的strftime\n\n使用COleDateTime类\n1) 获得一年中的某一天。\n      COleDateTime datetime;\n      datetime = COleDateTime::GetCurrentTime();\n      int DayOfYear = datetime.GetDayOfYear();\n2) 从文本串中读取时间。\n      COleDateTime datetime;\n      datetime.ParseDateTime(\"12:12:23 27 January 93\");\n3) 获取时间间隔。\n         //比方计算日期差\n         COleDateTime begin_date(1970, 1, 1, 0, 0, 0);\n         COleDateTime end_date(1990, 1, 1, 0, 0, 0);\n         COleDateTimeSpan timeSpan;    //计算时间差\n         timeSpan = end_date - begin_date;\n         long expi_date = timeSpan.GetDays();\n\n说明\n■ CTime和COleDateTime具有几乎同样的功能。然而，COleDateTime允许用户获得一年中的某一天(创建Julian日期的一种好方法)，以及分析一个时间文本串。\n■ 与CTime相比， COleDateTime的优点在于它支持DWORD变量。COleDateTime使用的位数是双浮点的两倍，既然CTime只是简单地计算从1970年1月1日之后经过的秒数，所以到了2037年它将达到4294967295，从而不能再使用。相反,COleDateTime是一个\n浮点数，它表示是从1900年12月30号之后的天数(小时是天的小数部分)，几千年之内不会溢出。"]],[15,15],[1911,1911]]],[1561089009004,["yongchao@yongchao-PC",[[-1,0,"# Lorem ipsum\n"]],[0,14],[0,0]]],[1561089010108,["yongchao@yongchao-PC",[[-1,0,"\n"]],[1,1],[0,0]]],[1561089045333,["yongchao@yongchao-PC",[[1,78,"\n"]],[77,77],[78,78]]],[1561089046100,["yongchao@yongchao-PC",[[1,79,"\n"]],[77,77],[78,78]]],[1561089046540,["yongchao@yongchao-PC",[[1,78,"#include <ATLComTime.h>"]],[78,78],[101,101]]],[1561089241252,["yongchao@yongchao-PC",[[1,818,"      \n"]],[817,817],[824,824]]],[1561089241436,["yongchao@yongchao-PC",[[-1,818,"      "],[1,824,"\n"]],[824,824],[819,819]]],[1561089241949,["yongchao@yongchao-PC",[[1,819," COleDateTime aCOleDateTime_end((time_t)delta_time);\n                    strDelta_Time = aCOleDateTime_end.Format(_T(\"%Y-%m-%d %H:%M:%S\"));"]],[819,819],[958,958]]],[1561089252115,["yongchao@yongchao-PC",[[-1,846,"_end"]],[846,850],[846,846]]],[1561089258043,["yongchao@yongchao-PC",[[-1,855,"delta_"]],[855,861],[855,855]]],[1561089263683,["yongchao@yongchao-PC",[[1,819,"\n"]],[818,818],[819,819]]],[1561089265205,["yongchao@yongchao-PC",[[-1,130,"     "],[1,135,"     "],[-1,148,"     "],[1,153,"     "],[-1,197,"     "],[1,202,"     "],[-1,231,"     "],[1,236,"     "],[-1,266,"     "],[1,271,"     "],[-1,297,"     "],[1,302,"     "],[-1,330,"     "],[1,335,"     "],[-1,367,"     "],[1,372,"     "],[-1,404,"     "],[1,409,"     "],[-1,459,"     "],[1,464,"     "],[-1,524,"     "],[1,529,"     "],[-1,587,"     "],[1,592,"     "],[-1,629,"     "],[1,634,"     "],[-1,683,"     "],[1,688,"     "],[-1,736,"     "],[1,741,"     "],[1,819,"C"],[-1,964,"        "],[1,972,"        "],[-1,992,"        "],[1,1000,"        "],[-1,1046,"        "],[1,1054,"        "],[-1,1142,"        "],[1,1150,"        "],[-1,1266,"     "],[1,1271,"     "],[-1,1295,"     "],[1,1300,"     "],[-1,1344,"     "],[1,1349,"     "],[-1,1405,"     "],[1,1410,"     "],[-1,1434,"     "],[1,1439,"     "],[-1,1501,"        "],[1,1509,"        "],[-1,1520,"        "],[1,1528,"        "],[-1,1575,"        "],[1,1583,"        "],[-1,1628,"        "],[1,1636,"        "],[-1,1663,"   "],[1,1666,"   "],[-1,1675,"        "],[1,1683,"        "],[-1,1718,"        "],[1,1726,"        "]],[819,819],[820,820]]],[1561089270709,["yongchao@yongchao-PC",[[1,820,"String strTemp;"]],[820,820],[835,835]]],[1561089274228,["yongchao@yongchao-PC",[[-1,902,"Delta_Time "],[1,913,"Temp"]],[899,913],[906,906]]],[1561089276262,["yongchao@yongchao-PC",[[-1,878,"\n"]],[879,879],[878,878]]],[1561089283246,["yongchao@yongchao-PC",[[1,878,"\n"]],[878,878],[879,879]]],[1561089286251,["yongchao@yongchao-PC",[[-1,897,"  "]],[898,898],[896,896]]],[1561089293347,["yongchao@yongchao-PC",[[-1,880,"                 "]],[897,897],[880,880]]],[1561089297213,["yongchao@yongchao-PC",[[1,887," "]],[887,887],[888,888]]],[1561089303507,["yongchao@yongchao-PC",[[-1,903,"_end"]],[890,907],[903,903]]],[1561089306756,["yongchao@yongchao-PC",[[1,937," \n"]],[936,936],[938,938]]],[1561089311012,["yongchao@yongchao-PC",[[1,819,"  "],[1,836,"  "],[1,879,"  "]],[819,936],[819,942]]],[1561089311292,["yongchao@yongchao-PC",[[1,821,"  "],[1,838,"  "],[1,883,"  "]],[819,942],[819,948]]],[1561089311515,["yongchao@yongchao-PC",[[1,823,"  "],[1,840,"  "],[1,887,"  "]],[819,948],[819,954]]],[1561089312828,["yongchao@yongchao-PC",[[-1,823,"  "],[-1,842,"  "],[-1,891,"  "]],[819,954],[819,948]]],[1561089326975,["yongchao@yongchao-PC",[[-1,844," "]],[845,845],[844,844]]],[1561089327804,["yongchao@yongchao-PC",[[-1,890," "]],[891,891],[890,890]]],[1561089333379,["yongchao@yongchao-PC",[[1,136,"  "],[1,148,"  "]],[130,185],[130,189]]],[1561089333804,["yongchao@yongchao-PC",[[1,138,"  "],[1,150,"  "]],[130,189],[130,193]]],[1561089335123,["yongchao@yongchao-PC",[[-1,138,"  "],[-1,152,"  "]],[130,193],[130,189]]],[1561089335379,["yongchao@yongchao-PC",[[-1,136,"  "],[-1,150,"  "]],[130,189],[130,185]]],[1561089335955,["yongchao@yongchao-PC",[[-1,134,"  "],[-1,148,"  "]],[130,185],[130,181]]],[1561089336355,["yongchao@yongchao-PC",[[-1,132,"  "],[-1,146,"  "]],[130,181],[130,177]]],[1561089336763,["yongchao@yongchao-PC",[[-1,130,"  "],[-1,144,"  "]],[130,177],[130,173]]],[1561089337619,["yongchao@yongchao-PC",[[1,130,"  "],[1,142,"  "]],[130,173],[130,177]]],[1561089337947,["yongchao@yongchao-PC",[[1,132,"  "],[1,144,"  "]],[130,177],[130,181]]],[1561089338259,["yongchao@yongchao-PC",[[1,134,"  "],[1,146,"  "]],[130,181],[130,185]]],[1561089338619,["yongchao@yongchao-PC",[[1,136,"  "],[1,148,"  "]],[130,185],[130,189]]],[1561089343924,["yongchao@yongchao-PC",[[1,130,"\n"]],[129,129],[130,130]]],[1561089345780,["yongchao@yongchao-PC",[[-1,130,"\n"]],[130,130],[129,129]]],[1561089346748,["yongchao@yongchao-PC",[[1,130,"\n"]],[129,129],[130,130]]],[1561089350716,["yongchao@yongchao-PC",[[-1,137,"  "],[-1,151,"  "]],[138,190],[136,186]]],[1561089351115,["yongchao@yongchao-PC",[[-1,135,"  "],[-1,149,"  "]],[136,186],[134,182]]],[1561089351603,["yongchao@yongchao-PC",[[-1,133,"  "],[-1,147,"  "]],[134,182],[132,178]]],[1561089352531,["yongchao@yongchao-PC",[[-1,131,"  "],[-1,145,"  "]],[132,178],[131,174]]],[1561089353043,["yongchao@yongchao-PC",[[1,131,"  "],[1,143,"  "]],[131,174],[131,178]]],[1561089353347,["yongchao@yongchao-PC",[[1,133,"  "],[1,145,"  "]],[131,178],[131,182]]],[1561089356467,["yongchao@yongchao-PC",[[1,194,"\n"]],[193,193],[194,194]]],[1561089359964,["yongchao@yongchao-PC",[[-1,199,"  "],[-1,229,"  "],[-1,268,"  "],[-1,295," "],[-1,300," "],[-1,328,"  "],[-1,365," "],[-1,370," "],[-1,402,"  "]],[201,445],[199,431]]],[1561089362916,["yongchao@yongchao-PC",[[1,443,"\n"]],[442,442],[443,443]]],[1561089368092,["yongchao@yongchao-PC",[[-1,448,"  "]],[450,450],[448,448]]],[1561089369979,["yongchao@yongchao-PC",[[1,448,"  "]],[448,448],[450,450]]],[1561089370788,["yongchao@yongchao-PC",[[-1,448,"  "]],[450,450],[448,448]]],[1561089371571,["yongchao@yongchao-PC",[[-1,511,"  "]],[513,513],[511,511]]],[1561089375292,["yongchao@yongchao-PC",[[1,568,"\n"]],[567,567],[568,568]]],[1561089380692,["yongchao@yongchao-PC",[[-1,573,"  "],[-1,611,"  "],[-1,669,"  "],[-1,718,"  "]],[575,774],[573,766]]],[1561089389859,["yongchao@yongchao-PC",[[1,937,"\n"]],[936,936],[937,937]]],[1561089393636,["yongchao@yongchao-PC",[[-1,945,"  "],[-1,966,"  "],[-1,1020,"  "],[-1,1116,"  "]],[947,1172],[945,1164]]],[1561089394052,["yongchao@yongchao-PC",[[-1,943,"  "],[-1,964,"  "],[-1,1016,"  "],[-1,1110,"  "]],[945,1164],[943,1156]]]],null,"yongchao@yongchao-PC"]]}