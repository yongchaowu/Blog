{"compress":true,"commitItems":[["48226cd0-7053-49cc-8c8c-4a278611a372",1561093585658,"# Lorem ipsum\n\nInterdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien.",[[1561093536839,["yongchao@yongchao-PC",[[-1,1," Lorem ipsum"]],[1,13],[1,1]]],[1561093538336,["yongchao@yongchao-PC",[[1,1," time"]],[1,1],[6,6]]],[1561093541951,["yongchao@yongchao-PC",[[-1,8,"Interdum et malesuada fames ac ante ipsum primis in faucibus. Morbi sagittis aliquam orci, id elementum leo varius at. Suspendisse in hendrerit orci. Aliquam nec congue augue.\n\n* [x] In volutpat scelerisque congue.\n* [ ] Nam ultricies justo dictum ligula pulvinar iaculis.\n* [ ] Etiam vulputate nulla eget lectus fermentum accumsan.\n* [ ] Sed in sem tincidunt, sollicitudin erat pharetra, bibendum sapien."]],[7,413],[7,7]]],[1561093549592,["yongchao@yongchao-PC",[[1,0,"# #"],[1,6,"_t"]],[2,6],[11,11]]],[1561093552743,["yongchao@yongchao-PC",[[-1,2,"## "]],[2,4],[1,1]]],[1561093553488,["yongchao@yongchao-PC",[[1,2," "]],[1,1],[2,2]]],[1561093619673,["yongchao@yongchao-PC",[[1,10,"https://www.runoob.com/w3cnote/cpp-time_t.html"]],[10,10],[56,56]]],[1561095713600,["yongchao@yongchao-PC",[[1,57,"\n"]],[56,56],[57,57]]],[1561095713800,["yongchao@yongchao-PC",[[1,58,"\n"]],[57,57],[58,58]]],[1561095714546,["yongchao@yongchao-PC",[[1,58,"Unix时间戳(Unix timestamp)，或称Unix时间(Unix time)、POSIX时间(POSIX time)，是一种时间表示方式，定义为从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。Unix时间戳不仅被使用在Unix 系统、类Unix系统中，也在许多其他操作系统中被广告采用。\n\n目前相当一部分操作系统使用32位二进制数字表示时间。此类系统的Unix时间戳最多可以使用到格林威治时间2038年01月19日03时14分07秒（二进制：01111111 11111111 11111111 11111111）。其后一秒，二进制数字会变为10000000 00000000 00000000 00000000，发生溢出错误，造成系统将时间误解为1901年12月13日20时45分52秒。这很可能会引起软件故障，甚至是系统瘫痪。使用64位二进制数字表示时间的系统（最多可以使用到格林威治时间292,277,026,596年12月04日15时30分08秒）则基本不会遇到这类溢出问题。"]],[58,58],[517,517]]],[1561095730201,["yongchao@yongchao-PC",[[1,518,"\n"]],[517,517],[518,518]]],[1561095730385,["yongchao@yongchao-PC",[[1,519,"\n"]],[518,518],[519,519]]],[1561095730749,["yongchao@yongchao-PC",[[1,519,"*   本地时间(locale time)\n*   格林威治时间（Greenwich Mean Time GMT）\n*   时间协调时间 （Universal Time Coordinated UTC）"]],[519,519],[620,620]]],[1561095762745,["yongchao@yongchao-PC",[[1,621,"* \n"]],[620,620],[623,623]]],[1561095762961,["yongchao@yongchao-PC",[[-1,621,"* "]],[623,623],[622,622]]],[1561095763402,["yongchao@yongchao-PC",[[1,622,"**（1）世界时**\n\n世界时是最早的时间标准。在1884年，国际上将1s确定为全年内每日平均长度的1/8.64×104。以此标准形成的时间系统，称为世界是，即UT1。1972年国际上开始使用国际原子时标，从那以后，经过格林威治老天文台本初子午线的时间便被称为世界时，即UT2，或称格林威治时间（GMT），是对地球转速周期性差异进行校正后的世界时。\n\n**（2）原子时**\n\n1967年，人们利用铯原子振荡周期极为规律的特性，研制出了高精度的原子时钟，将铯原子能级跃迁辐射9192631770周所经历的时间定为1s。现在用的时间就是1971年10月定义的国际原子时，是通过世界上大约200多台原子钟进行对比后，再由国际度量衡局时间所进行数据处理，得出的统一的原子时，简称TAI。\n\n**（3）世界协调时**\n\n世界协调时是以地球自转为基础的时间标准。由于地球自转速度并不均匀，并非每天都是精确的86400原子s，因而导致了自转时间与世界时之间存在18个月有1s的误差。为纠正这种误差，国际地球自转研究所根据地球自转的实际情况对格林威治时间进行增减闰s的调整，与国际度量衡局时间所联合向全世界发布标准时间，这就是所谓的世界协调时（UTC:CoordinatdeUniversalTime）。UTC的表示方式为：年（y）、月（m）、日（d）、时（h）、分（min）、秒（s），均用数字表示。\n\nGPS 系统中有两种时间区分，一为UTC，另一为LT（地方时）两者的区别为时区不同，UTC就是0时区的时间，地方时为本地时间，如北京为早上八点（东八区），UTC时间就为零点，时间比北京时晚八小时，以此计算即可通过上面的了解，我们可以认为格林威治时间就是时间协调时间（GMT=UTC），格林威治时间和UTC时间均用秒数来计算的。\n\n而在我们平时工作当中看到的计算机日志里面写的时间大多数是用UTC时间来计算的"]],[622,622],[1420,1420]]],[1561095773665,["yongchao@yongchao-PC",[[-1,1382,"而在我们平时工作当中看到的"]],[1382,1395],[1382,1382]]],[1561095774106,["yongchao@yongchao-PC",[[1,1382,"zg"]],[1382,1382],[1384,1384]]],[1561095774865,["yongchao@yongchao-PC",[[-1,1382,"zg"]],[1384,1384],[1382,1382]]],[1561095778450,["yongchao@yongchao-PC",[[1,1382,"注："]],[1382,1382],[1384,1384]]],[1561095821121,["yongchao@yongchao-PC",[[1,1409,"\n\n"]],[1409,1409],[1410,1410]]],[1561095821305,["yongchao@yongchao-PC",[[1,1411,"\n"]],[1410,1410],[1411,1411]]],[1561095821857,["yongchao@yongchao-PC",[[1,1412,"\n"]],[1411,1411],[1412,1412]]],[1561095822441,["yongchao@yongchao-PC",[[1,1412,"linux下存储时间常见的有两种存储方式，一个是从1970年到现在经过了多少秒，一个是用一个结构来分别存储年月日时分秒的。\n\ntime_t 这种类型就是用来存储从1970年到现在经过了多少秒，要想更精确一点，可以用结构struct timeval，它精确到微妙。"]],[1412,1412],[1543,1543]]],[1561095851281,["yongchao@yongchao-PC",[[1,1544,"\n"]],[1543,1543],[1544,1544]]],[1561095851721,["yongchao@yongchao-PC",[[1,1545,"\n"]],[1544,1544],[1545,1545]]],[1561095852049,["yongchao@yongchao-PC",[[1,1545,"struct timeval\n{\n    long tv_sec; /*秒*/\n    long tv_usec; /*微秒*/\n};"]],[1545,1545],[1612,1612]]],[1561095854953,["yongchao@yongchao-PC",[[1,1545,"  "],[1,1560,"  "],[1,1562," "],[1,1566," "],[1,1585,"  "],[1,1610,"  "]],[1545,1612],[1545,1622]]],[1561095855161,["yongchao@yongchao-PC",[[1,1547,"  "],[1,1564,"  "],[1,1566," "],[1,1572," "],[1,1591,"  "],[1,1618,"  "]],[1545,1622],[1545,1632]]],[1561095868746,["yongchao@yongchao-PC",[[1,1411,"使用linux/unix命令date来进行本地时间和local时间的转化"]],[1411,1411],[1447,1447]]],[1561095870081,["yongchao@yongchao-PC",[[1,1448,"\n"]],[1447,1447],[1448,1448]]],[1561095874041,["yongchao@yongchao-PC",[[1,1411,"\n"]],[1410,1410],[1411,1411]]],[1561095876050,["yongchao@yongchao-PC",[[1,1411,"##"]],[1411,1411],[1413,1413]]],[1561095881570,["yongchao@yongchao-PC",[[1,57,"## "]],[57,57],[60,60]]],[1561095884330,["yongchao@yongchao-PC",[[1,1416," "]],[1416,1416],[1417,1417]]],[1561095888986,["yongchao@yongchao-PC",[[1,60,"概念"]],[60,60],[62,62]]],[1561095903099,["yongchao@yongchao-PC",[[1,1419,"工具及内容"]],[1419,1419],[1424,1424]]],[1561095932065,["yongchao@yongchao-PC",[[1,1684,"    \n"]],[1683,1683],[1688,1688]]],[1561095932441,["yongchao@yongchao-PC",[[-1,1684,"    "],[1,1688,"\n"]],[1688,1688],[1685,1685]]],[1561095933257,["yongchao@yongchao-PC",[[1,1685,"而直接存储年月日的是一个结构：\n\nstruct tm\n{\n    int tm_sec;  /*秒，正常范围0-59， 但允许至61*/\n    int tm_min;  /*分钟，0-59*/\n    int tm_hour; /*小时， 0-23*/\n    int tm_mday; /*日，即一个月中的第几天，1-31*/\n    int tm_mon;  /*月， 从一月算起，0-11*/  1+p->tm_mon;\n    int tm_year;  /*年， 从1900至今已经多少年*/  1900＋ p->tm_year;\n    int tm_wday; /*星期，一周中的第几天， 从星期日算起，0-6*/\n    int tm_yday; /*从今年1月1日到目前的天数，范围0-365*/\n    int tm_isdst; /*日光节约时间的旗标*/\n};"]],[1685,1685],[2078,2078]]],[1561095937658,["yongchao@yongchao-PC",[[1,1702,"  "],[1,1712,"  "],[1,1714,"  "],[1,1758,"  "],[1,1783," "],[1,1787," "],[1,1813,"  "],[1,1855,"  "],[1,1900,"  "],[1,1957,"  "],[1,2005,"  "],[1,2048,"  "],[1,2076,"  "]],[1702,2078],[1702,2102]]],[1561095938033,["yongchao@yongchao-PC",[[1,1704,"  "],[1,1716,"  "],[1,1718,"  "],[1,1766,"  "],[1,1791,"  "],[1,1823,"  "],[1,1869,"  "],[1,1914,"  "],[1,1973,"  "],[1,2025,"  "],[1,2070,"  "],[1,2098,"  "]],[1702,2102],[1702,2126]]],[1561095958113,["yongchao@yongchao-PC",[[1,2127,"    \n"]],[2126,2126],[2131,2131]]],[1561095958593,["yongchao@yongchao-PC",[[-1,2127,"    "],[1,2131,"\n"]],[2131,2131],[2128,2128]]],[1561095959162,["yongchao@yongchao-PC",[[1,2128,"需要特别注意的是，年份是从1900年起至今多少年，而不是直接存储如2011年，月份从0开始的，0表示一月，星期也是从0开始的， 0表示星期日，1表示星期一。"]],[2128,2128],[2206,2206]]],[1561095961705,["yongchao@yongchao-PC",[[1,2128,"    "]],[2128,2128],[2132,2132]]],[1561095963964,["yongchao@yongchao-PC",[[-1,2128,"    "]],[2132,2132],[2128,2128]]],[1561095966625,["yongchao@yongchao-PC",[[1,2207,"\n"]],[2206,2206],[2207,2207]]],[1561095966937,["yongchao@yongchao-PC",[[1,2208,"\n"]],[2207,2207],[2208,2208]]],[1561095997610,["yongchao@yongchao-PC",[[-1,2208,"\n"],[1,2209,"#"]],[2208,2208],[2209,2209]]],[1561095997826,["yongchao@yongchao-PC",[[1,2209,"#"]],[2209,2209],[2210,2210]]],[1561096006898,["yongchao@yongchao-PC",[[-1,1422,"内容"]],[1422,1422],[1422,1422]]],[1561096013835,["yongchao@yongchao-PC",[[1,1422,"函数返回值"]],[1422,1422],[1427,1427]]],[1561096018177,["yongchao@yongchao-PC",[[-1,1422,"函数返回值"]],[1422,1427],[1422,1422]]],[1561096020435,["yongchao@yongchao-PC",[[1,1422,"结构体"]],[1422,1422],[1425,1425]]],[1561096025163,["yongchao@yongchao-PC",[[-1,1419,"工具"],[1,1421,"命令"]],[1419,1419],[1421,1421]]],[1561096028162,["yongchao@yongchao-PC",[[1,1419,"linux"]],[1419,1419],[1424,1424]]],[1561096031482,["yongchao@yongchao-PC",[[1,1427,"time"]],[1427,1427],[1431,1431]]],[1561096036834,["yongchao@yongchao-PC",[[1,2220," 函数"]],[2220,2220],[2223,2223]]],[1561096037817,["yongchao@yongchao-PC",[[1,2223,"\n\n"]],[2223,2223],[2224,2224]]],[1561096045682,["yongchao@yongchao-PC",[[1,2224,"#include <time.h>\nchar *asctime(const struct tm* timeptr);"]],[2224,2224],[2282,2282]]],[1561096047721,["yongchao@yongchao-PC",[[1,2224,"  "],[1,2242,"  "]],[2224,2282],[2224,2286]]],[1561096048105,["yongchao@yongchao-PC",[[1,2226,"  "],[1,2244,"  "]],[2224,2286],[2224,2290]]],[1561096049529,["yongchao@yongchao-PC",[[1,2224,"\n"]],[2223,2223],[2224,2224]]],[1561096070882,["yongchao@yongchao-PC",[[1,2291,"、、"]],[2291,2291],[2293,2293]]],[1561096071665,["yongchao@yongchao-PC",[[-1,2291,"、、"]],[2293,2293],[2291,2291]]],[1561096072658,["yongchao@yongchao-PC",[[1,2291,"//将结构中的信息转换为真实世界的时间，以字符串的形式显示"]],[2291,2291],[2320,2320]]],[1561096081041,["yongchao@yongchao-PC",[[1,2321,"    \n"]],[2320,2320],[2325,2325]]],[1561096083346,["yongchao@yongchao-PC",[[1,2325,"char *ctime(const time_t *timep);//"]],[2325,2325],[2360,2360]]],[1561096099297,["yongchao@yongchao-PC",[[1,2360,"将timep转换为真是世界的时间，以字符串显示，它和asctime不同就在于传入的参数形式不一样"]],[2360,2360],[2408,2408]]],[1561096102129,["yongchao@yongchao-PC",[[-1,2369,"真是"]],[2371,2371],[2369,2369]]],[1561096102634,["yongchao@yongchao-PC",[[1,2369,"zhi"]],[2369,2369],[2372,2372]]],[1561096103785,["yongchao@yongchao-PC",[[-1,2369,"zhi"]],[2372,2372],[2369,2369]]],[1561096104874,["yongchao@yongchao-PC",[[1,2369,"zhe"]],[2369,2369],[2372,2372]]],[1561096105569,["yongchao@yongchao-PC",[[-1,2369,"zhe"]],[2372,2372],[2369,2369]]],[1561096106474,["yongchao@yongchao-PC",[[1,2369,"zhen"]],[2369,2369],[2373,2373]]],[1561096107457,["yongchao@yongchao-PC",[[-1,2369,"zhen"]],[2373,2373],[2369,2369]]],[1561096109628,["yongchao@yongchao-PC",[[1,2369,"真实"]],[2369,2369],[2371,2371]]],[1561096124297,["yongchao@yongchao-PC",[[1,2409,"    \n"]],[2408,2408],[2413,2413]]],[1561096126370,["yongchao@yongchao-PC",[[1,2413,"double difftime(time_t time1, time_t time2);、、"]],[2413,2413],[2459,2459]]],[1561096127409,["yongchao@yongchao-PC",[[-1,2457,"、、"]],[2459,2459],[2457,2457]]],[1561096136330,["yongchao@yongchao-PC",[[1,2457,"//返回两个时间相差的秒数"]],[2457,2457],[2470,2470]]],[1561096151289,["yongchao@yongchao-PC",[[1,2471,"    \n"]],[2470,2470],[2475,2475]]],[1561096176258,["yongchao@yongchao-PC",[[1,2475,"int gettimeofday(struct timeval *tv, struct timezone *tz);//返回当前距离1970年的秒数和微妙数，后面的tz是时区，一般不用"]],[2475,2475],[2567,2567]]],[1561096205081,["yongchao@yongchao-PC",[[1,2568,"    \n"]],[2567,2567],[2572,2572]]],[1561096225122,["yongchao@yongchao-PC",[[1,2572,"struct tm* gmtime(const time_t *timep);//将time_t表示的时间转换为没有经过时区转换的UTC时间，是一个struct tm结构指针"]],[2572,2572],[2659,2659]]],[1561096226017,["yongchao@yongchao-PC",[[1,2660,"    \n"]],[2659,2659],[2664,2664]]],[1561096239418,["yongchao@yongchao-PC",[[1,2664,"stuct tm* localtime(const time_t *timep);//和gmtime类似，但是它是经过时区转换的时间。"]],[2664,2664],[2731,2731]]],[1561096251746,["yongchao@yongchao-PC",[[1,2732,"    \n"]],[2731,2731],[2736,2736]]],[1561096257386,["yongchao@yongchao-PC",[[1,2736,"time_t mktime(struct tm* timeptr);//"]],[2736,2736],[2772,2772]]],[1561096257610,["yongchao@yongchao-PC",[[1,2772,"将struct tm 结构的时间转换为从1970年至今的秒数"]],[2772,2772],[2802,2802]]],[1561096277321,["yongchao@yongchao-PC",[[1,2803,"    \n"]],[2802,2802],[2807,2807]]],[1561096286242,["yongchao@yongchao-PC",[[1,2807,"time_t time(time_t *t);//取得从1970年1月1日至今的秒数。"]],[2807,2807],[2850,2850]]],[1561096954386,["yongchao@yongchao-PC",[[1,2851,"    \n"]],[2850,2850],[2855,2855]]],[1561096954658,["yongchao@yongchao-PC",[[-1,2851,"    "],[1,2855,"\n"]],[2855,2855],[2852,2852]]],[1561096960331,["yongchao@yongchao-PC",[[-1,2852,"\n"],[1,2853,"#"]],[2852,2852],[2853,2853]]],[1561096964483,["yongchao@yongchao-PC",[[1,2853,"# cesh"]],[2853,2853],[2859,2859]]],[1561096965369,["yongchao@yongchao-PC",[[-1,2855,"cesh"]],[2859,2859],[2855,2855]]],[1561096965515,["yongchao@yongchao-PC",[[1,2855,"c"]],[2855,2855],[2856,2856]]],[1561096966089,["yongchao@yongchao-PC",[[-1,2855,"c"]],[2856,2856],[2855,2855]]],[1561096970260,["yongchao@yongchao-PC",[[1,2855,"测试实例"]],[2855,2855],[2859,2859]]],[1561096971202,["yongchao@yongchao-PC",[[1,2859,"\n\n"]],[2859,2859],[2860,2860]]],[1561096993154,["yongchao@yongchao-PC",[[1,2861,"\n"]],[2860,2860],[2861,2861]]],[1561096993419,["yongchao@yongchao-PC",[[-1,2861,"\n"],[1,2862,"·"]],[2861,2861],[2862,2862]]],[1561096993827,["yongchao@yongchao-PC",[[1,2862,"··"]],[2862,2862],[2864,2864]]],[1561096994506,["yongchao@yongchao-PC",[[-1,2862,"··"]],[2864,2864],[2862,2862]]],[1561096994690,["yongchao@yongchao-PC",[[-1,2861,"·"],[1,2862,"\n"]],[2862,2862],[2861,2861]]],[1561096995635,["yongchao@yongchao-PC",[[-1,2861,"\n"],[1,2862,"`"]],[2861,2861],[2862,2862]]],[1561096995963,["yongchao@yongchao-PC",[[1,2862,"``"]],[2862,2862],[2864,2864]]],[1561096995989,["yongchao@yongchao-PC",[[1,2864,"language\n```\n"]],[2864,2864],[2864,2872]]],[1561096996602,["yongchao@yongchao-PC",[[-1,2864,"language"],[1,2872,"\n"]],[2864,2872],[2865,2865]]],[1561096996954,["yongchao@yongchao-PC",[[1,2865,"/*gettime1.c*/\n#include <time.h>\n\nint main()\n{\n    time_t timep;\n\n    time(&timep); /*获取time_t类型的当前时间*/\n    /*用gmtime将time_t类型的时间转换为struct tm类型的时间按，／／没有经过时区转换的UTC时间\n      然后再用asctime转换为我们常见的格式 Fri Jan 11 17:25:24 2008\n    */\n    printf(\"%s\", asctime(gmtime(&timep)));\n    return 0;\n}"]],[2865,2865],[3148,3148]]],[1561097010578,["yongchao@yongchao-PC",[[1,3149,"\n"]],[3148,3148],[3149,3149]]],[1561097010978,["yongchao@yongchao-PC",[[1,3150,"\n"]],[3149,3149],[3150,3150]]],[1561097011330,["yongchao@yongchao-PC",[[1,3150,"编译并运行：\n\n$gcc -o gettime1 gettime1.c\n$./gettime1\nFri Jan 11 17:04:08 2008"]],[3150,3150],[3222,3222]]],[1561097020802,["yongchao@yongchao-PC",[[1,3158,"  "],[1,3186,"  "],[1,3198,"  "]],[3158,3222],[3158,3228]]],[1561097227643,["yongchao@yongchao-PC",[[1,3233,"\n"]],[3232,3232],[3233,3233]]],[1561097227906,["yongchao@yongchao-PC",[[1,3234,"\n"]],[3233,3233],[3234,3234]]],[1561097228714,["yongchao@yongchao-PC",[[1,3234,"time, gmtime, asctime 所表示的时间都是UTC时间，只是数据类型不一样，\n\n而localtime, ctime 所表示的时间都是经过时区转换后的时间，它和你用系统命令date所表示的CST时间应该保持一致。"]],[3234,3234],[3347,3347]]],[1561097312578,["yongchao@yongchao-PC",[[1,2852,"\n"]],[2851,2851],[2852,2852]]],[1561097314419,["yongchao@yongchao-PC",[[1,2852,"```"]],[2852,2852],[2855,2855]]],[1561097316913,["yongchao@yongchao-PC",[[-1,2852,"```"]],[2855,2855],[2852,2852]]],[1561097318346,["yongchao@yongchao-PC",[[1,2853,"\n"]],[2851,2851],[2852,2852]]],[1561097319963,["yongchao@yongchao-PC",[[1,2852,"```"]],[2852,2852],[2855,2855]]],[1561097321802,["yongchao@yongchao-PC",[[1,2857,"\n"]],[2855,2855],[2856,2856]]],[1561097322515,["yongchao@yongchao-PC",[[1,2856,"``"]],[2856,2856],[2858,2858]]],[1561097322859,["yongchao@yongchao-PC",[[1,2858,"``"]],[2858,2858],[2860,2860]]],[1561097323658,["yongchao@yongchao-PC",[[-1,2859,"`"]],[2860,2860],[2859,2859]]],[1561097324722,["yongchao@yongchao-PC",[[1,2856,"\n"]],[2855,2855],[2856,2856]]],[1561097325179,["yongchao@yongchao-PC",[[1,2856,"**strftime() 函数将时间格式化**"]],[2856,2856],[2879,2879]]],[1561097327010,["yongchao@yongchao-PC",[[-1,2877,"**"]],[2879,2879],[2877,2877]]],[1561097329378,["yongchao@yongchao-PC",[[-1,2856,"**"]],[2858,2858],[2856,2856]]],[1561097330339,["yongchao@yongchao-PC",[[1,2856,"//"]],[2856,2856],[2858,2858]]],[1561097331573,["yongchao@yongchao-PC",[[1,2878,"\n"]],[2877,2877],[2878,2878]]],[1561097338067,["yongchao@yongchao-PC",[[1,2878,"size_t strftime(\n     char *strDest,\n     size_t maxsize,\n     const char *format,\n     const struct tm *timeptr\n);"]],[2878,2878],[2993,2993]]],[1561097381650,["yongchao@yongchao-PC",[[1,2994,"\n"]],[2993,2993],[2994,2994]]],[1561097382370,["yongchao@yongchao-PC",[[1,2994,"据format指向字符串中格式命令把timeptr中保存的时间信息放在strDest指向的字符串中，最多向strDest中存放maxsize个字符。该函数返回向strDest指向的字符串中放置的字符数。\n\n函数strftime()的操作有些类似于sprintf()：识别以百分号(%)开始的格式命令集合，格式化输出结果放在一个字符串中。格式化命令说明串 strDest中各种日期和时间信息的确切表示方法。格式串中的其他字符原样放进串中。格式命令列在下面，它们是区分大小写的。"]],[2994,2994],[3231,3231]]],[1561097385002,["yongchao@yongchao-PC",[[1,3232,"\n"]],[3231,3231],[3232,3232]]],[1561097393610,["yongchao@yongchao-PC",[[1,3233,"\n"]],[3232,3232],[3233,3233]]],[1561097395443,["yongchao@yongchao-PC",[[1,3233,"  %a 星期几的简写\n%A 星期几的全称\n%b 月分的简写\n%B 月份的全称\n%c 标准的日期的时间串\n%C 年份的后两位数字\n%d 十进制表示的每月的第几天\n%D 月/天/年\n%e 在两字符域中，十进制表示的每月的第几天\n%F 年-月-日\n%g 年份的后两位数字，使用基于周的年\n%G 年分，使用基于周的年\n%h 简写的月份名\n%H 24小时制的小时\n%I 12小时制的小时\n%j 十进制表示的每年的第几天\n%m 十进制表示的月份\n%M 十时制表示的分钟数\n%n 新行符\n%p 本地的AM或PM的等价显示\n%r 12小时的时间\n%R 显示小时和分钟：hh:mm\n%S 十进制的秒数\n%t 水平制表符\n%T 显示时分秒：hh:mm:ss\n%u 每周的第几天，星期一为第一天 （值从0到6，星期一为0）\n%U 第年的第几周，把星期日做为第一天（值从0到53）\n%V 每年的第几周，使用基于周的年\n%w 十进制表示的星期几（值从0到6，星期天为0）\n%W 每年的第几周，把星期一做为第一天（值从0到53）\n%x 标准的日期串\n%X 标准的时间串\n%y 不带世纪的十进制年份（值从0到99）\n%Y 带世纪部分的十制年份\n%z，%Z 时区名称，如果不能得到时区名称则返回空字符。\n%% 百分号"]],[3233,3233],[3776,3776]]],[1561097400883,["yongchao@yongchao-PC",[[1,3245,"  "],[1,3255,"  "],[1,3264,"  "],[1,3273,"  "],[1,3286,"  "],[1,3298,"  "],[1,3314,"  "],[1,3323,"  "],[1,3346,"  "],[1,3355,"  "],[1,3375,"  "],[1,3389,"  "],[1,3399,"  "],[1,3411,"  "],[1,3423,"  "],[1,3439,"  "],[1,3451,"  "],[1,3464,"  "],[1,3471,"  "],[1,3488,"  "],[1,3499,"  "],[1,3516,"  "],[1,3526,"  "],[1,3535,"  "],[1,3553,"  "],[1,3585,"  "],[1,3613,"  "],[1,3631,"  "],[1,3657,"  "],[1,3685,"  "],[1,3695,"  "],[1,3705,"  "],[1,3727,"  "],[1,3741,"  "],[1,3770,"  "]],[3245,3776],[3245,3846]]],[1561097502930,["yongchao@yongchao-PC",[[1,4348,"\n"]],[4347,4347],[4348,4348]]],[1561097503162,["yongchao@yongchao-PC",[[1,4349,"\n"]],[4348,4348],[4349,4349]]],[1561097503370,["yongchao@yongchao-PC",[[1,4350,"\n"]],[4349,4349],[4350,4350]]],[1561097505868,["yongchao@yongchao-PC",[[-1,4350,"\n"],[1,4351,"`"]],[4350,4350],[4351,4351]]],[1561097506228,["yongchao@yongchao-PC",[[1,4351,"``"]],[4351,4351],[4353,4353]]],[1561097506256,["yongchao@yongchao-PC",[[1,4353,"language\n```\n"]],[4353,4353],[4353,4361]]],[1561097507002,["yongchao@yongchao-PC",[[-1,4353,"language"],[1,4361,"\n"]],[4353,4361],[4354,4354]]],[1561097507275,["yongchao@yongchao-PC",[[1,4354,"# gmtime_s， _gmtime32_s， _gmtime64_s"]],[4354,4354],[4390,4390]]]],null,"yongchao@yongchao-PC"]]}